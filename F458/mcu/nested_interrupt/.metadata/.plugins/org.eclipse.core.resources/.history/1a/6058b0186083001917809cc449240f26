/** @file HL_sys_main.c 
*   @brief Application main file
*   @date 07-July-2017
*   @version 04.07.00
*
*   This file contains an empty main function,
*   which can be used for the application.
*/

/* 
* Copyright (C) 2009-2016 Texas Instruments Incorporated - www.ti.com  
* 
* 
*  Redistribution and use in source and binary forms, with or without 
*  modification, are permitted provided that the following conditions 
*  are met:
*
*    Redistributions of source code must retain the above copyright 
*    notice, this list of conditions and the following disclaimer.
*
*    Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the 
*    documentation and/or other materials provided with the   
*    distribution.
*
*    Neither the name of Texas Instruments Incorporated nor the names of
*    its contributors may be used to endorse or promote products derived
*    from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
*  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/


/* USER CODE BEGIN (0) */
/* USER CODE END */

/* Include Files */

#include "HL_sys_common.h"

/* USER CODE BEGIN (1) */
#include "HL_sci.h"
#include "HL_ecap.h"
#include "HL_gio.h"
#include "HL_reg_het.h"
#include "HL_rti.h"
#include <stdio.h>
#include <string.h>

void sci_display(sciBASE_t* sci, uint8* buf, int len);
/* USER CODE END */

/** @fn void main(void)
*   @brief Application main function
*   @note This function is empty by default.
*
*   This function is called after startup.
*   The user can use this function to implement the application.
*/

/* USER CODE BEGIN (2) */
void wait(int delay);

//#define __RTI
#define __ecap
/* USER CODE END */

int main(void)
{
/* USER CODE BEGIN (3) */
    sciInit();
    ecapInit();
    gioInit();
#ifdef __ecap
    ecapStartCounter(ecapREG1);
    ecapStartCounter(ecapREG2);
    ecapEnableCapture(ecapREG1);
    ecapEnableCapture(ecapREG2);
#endif

#ifdef __RTI
    gioSetDirection(hetPORT1, (1ull << 0) | (1ull << 31)); /* Enable N2HET1_00 and N2HET1_31 output buffer */
    gioSetBit(hetPORT1, 31ull, 0ull); /* Switch off LED D4 */
    gioSetBit(hetPORT1,  0ull, 0ull); /* Switch off LED D5 */

    rtiInit();

    rtiEnableNotification(rtiREG1, rtiNOTIFICATION_COMPARE0);
    rtiEnableNotification(rtiREG1, rtiNOTIFICATION_COMPARE1);

    rtiStartCounter(rtiREG1, rtiCOUNTER_BLOCK0);
#endif
    _enable_IRQ();


    for(;;)
        ;
/* USER CODE END */

    return 0;
}


/* USER CODE BEGIN (4) */
void ecapNotification(ecapBASE_t *ecap,uint16 flags){
    char buf[64];
    int len;

    if(ecap==ecapREG1){
        sprintf(buf,"-----------------CAP1 Start-----------------\n\r\0");
        len=strlen(buf);
        sci_display(sciREG1,(uint8 *)buf,len);
        wait(1000);

        sprintf(buf,"-----------------CAP1 END-----------------\n\r\0");
        len=strlen(buf);
        sci_display(sciREG1,(uint8*)buf,len);

    }
    if(ecap==ecapREG2){
        sprintf(buf,"^^^^^^^^^^^^^^^^^CAP2 Start^^^^^^^^^^^^^^^\n\r\0");
        len=strlen(buf);
        sci_display(sciREG1,(uint8*)buf,len);
        wait(10000);
        sprintf(buf,"^^^^^^^^^^^^^^^^^^^CAP2 END^^^^^^^^^^^^^^^^^^^^\n\r\0");
        len=strlen(buf);
        sci_display(sciREG1,(uint8*)buf,len);
    }
}

void wait(int delay){
    int i;
    for(i=0;i<delay;i++)
        ;
}

void sci_display(sciBASE_t* sci, uint8* buf, int len){
    while(len--){
        while(sci->FLR&0x4==4)
            ;
        sciSendByte(sci,*buf++);
    }
}

void rtiNotification(rtiBASE_t *rtiREG, uint32 notification)
{
    char buf[64];
    int len;

    switch(notification)
        {
        case rtiNOTIFICATION_COMPARE0:
        {
            uint32 u32Period  = rtiGetPeriod(rtiREG1, rtiCOMPARE0);
            uint32 u32CurrCmp = rtiREG1->CMP[rtiCOMPARE0].COMPx;

            sprintf(buf,"-----------------rti0 Start-----------------\n\r\0");
            len=strlen(buf);
            sci_display(sciREG1,(uint8 *)buf,len);

            gioSetBit(hetPORT1, 31ull, 1ull); /* Switch on LED D4 */

            /* Wait for half the period prior to switch off the LED */
            while(rtiREG1->CNT[0].FRCx < (u32CurrCmp - (u32Period >> 1)));

            gioSetBit(hetPORT1, 31ull, 0ull); /* Switch off LED D4 */

            sprintf(buf,"-----------------rti0 END-----------------\n\r\0");
            len=strlen(buf);
            sci_display(sciREG1,(uint8*)buf,len);
        }
        break;
        case rtiNOTIFICATION_COMPARE1:
        {
            uint32 u32Period  = rtiGetPeriod(rtiREG1, rtiCOMPARE1);
            uint32 u32CurrCmp = rtiREG1->CMP[rtiCOMPARE1].COMPx;

            sprintf(buf,"-----------------rti1 Start-----------------\n\r\0");
            len=strlen(buf);
            sci_display(sciREG1,(uint8 *)buf,len);

            gioSetBit(hetPORT1, 0ull, 1ull); /* Switch on LED D5 */

            /* Wait for half the period proir to switch off the LED */
            while(rtiREG1->CNT[0].FRCx < (u32CurrCmp - (u32Period >> 1)));

            gioSetBit(hetPORT1, 0ull, 0ull); /* Switch off LED D5 */

            sprintf(buf,"-----------------rti1 Start-----------------\n\r\0");
            len=strlen(buf);
            sci_display(sciREG1,(uint8 *)buf,len);
        }
        break;
        default:
            break;
        }

}
/* USER CODE END */
