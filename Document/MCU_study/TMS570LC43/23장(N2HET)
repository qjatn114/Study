23. High-End Timer (N2HET) Module

23.1 기능
• 입력 및 출력 타이밍 기능을 위한 프로그래밍 가능한 타이머
• 전용 시간 및 각도 기능에 대한 명령어 세트 감소 (30 개 명령어)
• 패리티에 의해 보호되는 명령어 RAM의 최대 128 비트 96 워드 워드. 실제 구현 된 단어 수를 데이터 시트에서 확인하십시오.
• 타이머, 이벤트 카운터 및 앵글 카운터를 위한 25 비트 가상 카운터의 사용자 정의 구성
• 각 핀에 대한 7 비트 하드웨어 카운터는 25 비트 가상 카운터와 함께 최대 32 비트 분해능을 허용합니다.
• 입력 신호 측정 또는 출력 신호 생성에 사용할 수있는 최대 32 핀
조정 가능한 억제 윈도우가있는 각 입력 핀에 대해 프로그래밍 가능한 억제 필터
• 낮은 CPU 오버 헤드 및 인터럽트로드
• 전용 하이 엔드 타이머 전송 장치 (HTU) 또는 DMA를 사용하여 CPU 메모리와의 효율적인 데이터 전송
• 다양한 루프백 메커니즘 및 핀 상태 리드 백 기능을 갖춘 진단 기능
• 하드웨어 각도 생성기 (HWAG)


23.1.1 개요
N2HET은 5 세대 Texas Instruments (TI) 고급 지능형 타이머 모듈입니다. 이전 세대와 비교하여 향상된 기능 세트를 제공합니다.

이 타이머 모듈은 엔진 관리 또는 모터 제어와 같은 실시간 애플리케이션을위한 정교한 타이밍 기능을 제공합니다. 고해상도 하드웨어 채널은주기
및 펄스 측정, 출력 비교 및 PWM과 같이 널리 사용되는 타이밍 기능에 대해 더 높은 정확도를 제공합니다.

대부분 단순하지만 포괄적 인 지침을 기반으로하는 축소 된 명령어 세트는 응용 프로그램과 그 파생어의 정의 및 개발주기를 향상시킵니다. 
N2HET 브레이크 포인트 기능과 다양한 정지 기능이 결합되어 N2HET 소프트웨어 응용 프로그램을 쉽게 디버그 할 수 있습니다.


23.1.1.1 주요 이점
입력 캡처 또는 다중 PWM과 같은 고전적인 시간 기능 외에도 타이머 프로그램 메인 루프에서 상위 레벨 시간 기능을 쉽게 구현할 수 있습니다.
보다 높은 수준의 시간 기능에는 각도 구동 파형, 각도 및 시간 구동 펄스 및 입력 펄스 폭 변조 (PWM) 듀티 사이클 측정이 포함됩니다.
이러한 높은 수준의 기능으로 인해 CPU와의 데이터 교환은 응용 프로그램의 기본 매개 변수 (마침표, 펄스 폭, 각도 값 등)로 제한됩니다. 
매개 변수 통신을위한 실시간 제약이 극적으로 최소화됩니다. 예를 들어 인터럽트가 거의 필요하지 않고 비동기 매개 변수 업데이트가 허용됩니다.
축소 된 명령어 세트와 간단한 실행 흐름 제어로 프로그램을 개발하고 수정하는 것이 쉽고 간단합니다. 간단한 알고리즘은 전체 흐름 제어를 N2HET 프로그램 
자체에 내장 할 수 있습니다. 보다 복잡한 알고리즘은 N2HET RAM에 대한 CPU 액세스를 이용할 수 있습니다. 이를 통해 CPU 프로그램은 계산을 수행하고
N2HET RAM의 데이터 및 제어 필드를 변경하여 타이머 프로그램 흐름을 수정할 수 있습니다. N2HET RAM에 대한 CPU 액세스는 또한 타이머 프로그램의 
디버그 및 개발을 향상시킵니다. CPU 프로그램은 N2HET을 중지하고 N2HET RAM에있는 프로그램, 컨트롤 및 데이터 필드의 내용을 볼 수 있습니다.
마지막으로, 모듈 형 구조는 광범위한 응용 프로그램을 처리 할 수있는 최대 유연성을 제공합니다. 루프 해상도와 HR 클록을 조정하기 위해 2 개의 계단식 
프리 스케일 레이터에서 타이머 분해능을 선택할 수 있습니다. 32 개의 I / O 핀은 각 채널에 대한 고해상도를 포함하여 입력,주기 
또는 펄스 캡처 및 출력 비교의 모든 조합을 제공 할 수 있습니다.


23.1.1.2 타이머 모듈 구조 및 실행
타이머는 축소 된 명령어 세트를 작동시키는 특수 마이크로 기계로 구성됩니다. 2 개의 25 비트 레지스터와 3 개의 32 비트 레지스터를 사용하여 시간, 
이벤트 카운트 및 각도 값과 같은 정보를 조작 할 수 있습니다. N2HET이 하나의 시스템 사이클에서 명령어 연산 코드와 데이터를 가져와 데이터 처리 속도를
높일 수있는 넓은 명령어 형식 (96 비트)으로 시스템 성능이 향상되었습니다. ALU에서 수행되는 일반적인 연산은 더하기 (카운트), 비교 및 크기 비교 
(더 높거나 같음)입니다.

각 명령어는 32 비트 프로그램 필드, 32 비트 제어 필드 및 32 비트 데이터 필드로 구성됩니다. N2HET 실행 유닛은 하나의 사이클에서 
완전한 96 비트 명령어를 가져 와서 실행합니다. 모든 명령은 실행될 다음 명령의 주소를 지정하기위한 9 비트 필드를 포함합니다. 일부 지침에는
특정 조건이 참일 때마다 다음 주소로 사용되는 9 비트 조건부 주소도 포함됩니다. 이것은 저렴한 N2HET 프로그램의 흐름을 제어합니다. 많은 경우에 
별도의 분기 명령어가 필요하지 않습니다.

호스트 CPU에 대한 인터페이스는 통신 메모리와 제어 레지스터를 기반으로합니다. 통신 메모리는 타이머 명령 (프로그램 및 데이터)을 포함합니다. 
이 메모리는 일반적으로 재설정 후 타이머가 실행되기 전에 CPU 또는 DMA에 의해 초기화됩니다. 타이머 프로그램이 메모리에로드되면 CPU는 타이머 실행을 
시작하고 일반적으로 데이터 매개 변수가 읽히거나 타이머 메모리에 기록됩니다. 제어 레지스터에는 타이머 클럭 선택, I / O 핀 구성 및 
타이머 모듈 제어를위한 비트가 포함됩니다.

프로그래머는 특정 순서로 명령을 결합하여 타이머 기능을 구현합니다. 예를 들어, 단일 카운트 (CNT) 명령은 타이머를 구현합니다. 간단한 PWM 
생성기는 CNT 및 비교 (ECMP 또는 MCMP)의 두 가지 명령어 시퀀스로 구현 될 수있다. 복합 시간 함수는 시퀀스에 많은 명령어를 포함 할 수 있습니다.
전체 타이머 프로그램은 순차적으로 실행되는 일련의 명령어입니다. 끝까지 도달하면 프로그램은 루프로 작동하도록 첫 번째 명령으로 롤해야합니다.
루프가 실행되는 시간은 루프 해결 클럭 사이클 또는 루프 해결 기간 (LRP)이라고합니다. N2HET이 첫 번째 명령으로 롤오프 할 때 타이머는 
루프 해결 클럭마다 하나의 루프 만 실행되도록 루프 실행을 다시 시작하기 위해 루프 해결 클럭을 기다립니다.

N2HET 프로그램을 통한 가장 긴 경로는 루프 해상도 클록 (LRP) 내에서 완료되어야합니다. 그렇지 않으면 일부 명령어가 루프를 통해 매번 실행되지 
않으므로 프로그램이 예기치 않게 실행됩니다. 이 효과는 타이머 기능의 정확도와 타이머가 수행 할 수있는 기능 수 (명령어 수) 사이에 강력한 연계를 
만듭니다. 이러한 제한을 극복하는 데 도움이되는 N2HET 핀 각각에 대해 고해상도 (HR) 하드웨어 타이머 확장을 사용할 수 있습니다.

고해상도 하드웨어 타이머는 고해상도 클럭에서 작동하며 루프 해상도 클럭 주파수의 2 배에서 128 배 사이의 주파수 배수로 구성 될 수 있습니다. 
이는 타이머 이벤트 및 측정의 해상도를 루프 해결 명령으로 가능한 것 이상으로 확장합니다.

일반적으로 사용되는 N2HET 명령어의 대부분은 루프 해상도 또는 고해상도에서 작동 할 수 있습니다. 각 핀에 대해 하나의 고해상도 명령이 루프 해결 
기간마다 실행될 수 있다는 제한이 있습니다.

특정 명령어 (MOV32, ADM32, ...)는 다른 명령어의 데이터 필드를 수정할 수 있습니다. 이 기능을 사용하면 N2HET 프로그램이 캡처 및 비교 기능에서
이중 버퍼링을 구현할 수 있습니다. 예를 들어, ECMP 비교 명령 다음에 ECMP 명령이 일치 할 때 조건부로 실행되는 MOV32 명령이 올 수 있습니다. 
호스트 CPU는 ECMP 명령어의 데이터 필드에 직접 쓰는 대신 MOV32 명령어의 데이터 필드에 비동기 적으로 쓰는 방법으로 다음 비교 값을 업데이트 할 수 
있습니다. ECMP 명령어가 현재 비교 값과 일치 한 후에 MOV32 명령어가 실제로 실행될 때 버퍼 (MOV32 데이터 필드)에서 
비교 레지스터 (ECMP 데이터 필드) 로의 복사가 발생합니다. 이는 이중 버퍼 하드웨어 비교 레지스터에서 기대하는 것과 동일한 동작입니다.

다른 명령어 (MOV64, RADM64)는 다른 명령어의 제어 필드와 데이터 필드를 모두 수정할 수 있습니다. 이를 통해 N2HET는 토글 기능을 구현할 수 있습니다. 
예를 들어, ECMP 명령어 다음에는 한 쌍의 MOV64 명령어가 올 수 있습니다. MOV64 명령어는 ECMP 명령어의 데이터 필드를 업데이트하여
이중 버퍼링 동작을 구현합니다. 또한 핀 동작 및 조건부 주소 같은 것을 변경할 수 있는 ECMP 명령어의 제어 필드를 업데이트합니다. 
한 MOV64 명령어가 ECMP 핀 동작을 SET로 설정하고 두 번째 명령어를 CLEAR로 변경하고 두 MOV64 명령어가 조건 어드레스를 서로 가리키도록 
업데이트하면 단일 ECMP 명령어를 사용하여 비교할 때마다 핀을 토글 할 수 있습니다 일치가 발생합니다.


23.1.1.3 실적
대부분의 명령어는 한 사이클에서 실행되지만 몇 개는 두세 사이클을 수행합니다.

N2HET은 CPU 인터럽트없이 많은 복잡한 출력 파형을 생성 할 수 있습니다. 특정한 이벤트 (예를 들어, 치아 결손이나 짧은 / 긴 입력 신호)에 이어 
특별한 알고리즘이 필요한 경우, CPU에 대한 최소한의 인터럽트가 다른 작업을 위해 CPU를 필요로합니다.


23.1.1.4 NHET와 비교되는 N2HET
N2HET NHET의 개선 사항은 다음과 같습니다.
• 8 개의 새로운 명령어 : ADD, ADC, SUB, SBB, AND, OR, XOR, RCNT
• ALU 플래그의 전체 집합 캐리 (C), 네거티브 (N), 제로 (Z), 오버플로 (V)
• 부호있는 및 부호없는 산술 비교 조건을 지원하도록 확장 된 분기 명령어 (BR)
• 2 개의 추가 32 비트 임시 작업 레지스터 R, S
• 핀 쌍 사이의 고해상도 구조의 AND 공유를위한 새로운 HETAND 레지스터
• 향상된 고해상도 PCNT 명령


23.1.1.5 NHET 및 N2HET과 HET 비교
HET 모듈과 비교하여 N2HET에는 23.1.1.4 절에 설명 된 모든 향상된 기능과 다음과 같은 추가 기능이 포함되어 있습니다.
• 새로운 인터럽트 인 에이블 세트 및 클리어 레지스터
• 새로운 Request Enable Set 및 Clear 레지스터를 포함하여 DMA 모듈 또는 HET Transfer Unit (HTU)에 요청을 생성 할 수있는 기능
• NHET RAM 패리티 오류 감지
제한 주파수 및 카운터 클럭을 구성하기 위해 32 개 I / O 채널 및 제어 레지스터 각각에 대한 억제 필터
• NHET 명령의 제어 워드에서 이전 비트 필드에 의존하지 않는 향상된 가장자리 감지 하드웨어.
• 다음, 조건부 및 원격 주소가 8 비트에서 9 비트로 확장됩니다.
루프 해상도 데이터 필드는 20 비트에서 25 비트로 확장됩니다
• 고해상도 데이터 필드는 5 비트에서 7 비트로 확장됩니다.
• 적절한 조건의 명령은 HET Transfer Unit (HTU) 또는 DMA 모듈을 트리거하는 요청 라인의 번호를 지정할 수 있습니다
• CNT 명령은 선택된 레지스터 값과 최대 값을 비교할 때 동등 비교 또는 같거나 더 큰 비교를 구성 할 수있는 비트를 제공합니다
• MOV32 명령어는 새 비트를 제공합니다. 1로 설정하면 MOV32는 Z 플래그가 설정된 경우에만 이동을 수행합니다. 0으로 설정하면 MOV32는 실행될 
때마다 이동을 수행합니다 (Z 플래그의 상태와 별도로)
• 타임 스탬프와 에지 카운터의 조합 인 새로운 명령어 WCAPE가 있습니다.
• 새로운 오픈 드레인, 풀 비활성화 및 풀 선택 레지스터


23.1.1.6 지침 기능
N2HET에는 다음과 같은 지침 기능이 있습니다.
• N2HET은 RISC 기반의 특수 타이머 마이크로 머신을 사용하여 30 가지 명령어 집합을 수행합니다.
• 명령어는 VLIW (Very Long Instruction Word) 형식 (96 비트 폭)으로 구현됩니다.
• N2HET 프로그램 실행은 외부 또는 내부 이벤트에 의해 자체 구동되며, 입력 에지 또는 출력 비교를 기반으로하는 특수 루틴으로 분기됩니다.
• 명령은 실행 된 다음 명령을 가리키며 프로그램 카운터가 필요하지 않습니다.
• 몇 가지 지침은 내부 또는 외부 조건에 따라 프로그램 흐름을 변경할 수 있습니다


23.1.1.7 프로그램 사용
N2HET 명령어 / 프로그램은 N2HET 어셈블러로 어셈블 할 수 있습니다. 어셈블러는 주 응용 프로그램에 포함될 수있는 C- 구조를 생성합니다. 
응용 프로그램은 구조체의 내용을 N2HET RAM에 복사하고, 필요한 레지스터를 설정하고 N2HET 프로그램 실행을 시작해야합니다. 어셈블러는 
C- 구조 외에도 주 응용 프로그램이 다른 명령어에 액세스하고 예를 들어 PWM의 듀티 사이클을 변경하거나 특정 신호 에지의 캡처 된 값을 읽도록하는 
헤더 파일을 생성합니다.

23.1.2 블록 다이어그램
N2HET 모듈 (그림 23-1 참조)은 4 개의 개별 구성 요소로 구성됩니다.
• 호스트 인터페이스
• N2HET RAM
• 특수 타이머 마이크로 머신 • I / O 제어 (N2HET는 최대 32 핀의 I / O 포트에 연결됨)


23.2 N2HET 기능 설명
N2HET에는 N2HET 코드가로드되는 RAM이 있습니다. N2HET 코드는 특수 타이머 마이크로 머신에 의해 실행됩니다. 호스트 인터페이스와 I / O 컨트롤은 
각각 CPU와 외부 핀에 대한 인터페이스를 제공합니다.

23.2.1 전문화 된 타이머 Micromachine
N2HET은 23.5.1 절에 설명 된 자체 명령 집합을 가지고 있습니다. 타이머 마이크로 머신은 N2HET RAM에서 각 명령어를 읽습니다. 프로그램 및 제어 
필드에는 특수 타이머 마이크로 기계가 명령을 실행하는 방법에 대한 지침이 들어 있습니다. 대부분의 지침에서 데이터 필드는 조작해야 할 정보를 저장합니다.

특수 타이머 마이크로 머신은 N2HET RAM에 저장된 명령어를 순차적으로 실행합니다. N2HET 프로그램 실행은 외부 또는 내부 이벤트에 의해 자체 구동됩니다. 
이는 입력 에지 또는 출력 비교가 프로그램이 조건부 주소를 사용하여 특수 루틴으로 분기하도록 강제 할 수 있음을 의미합니다.

그림 23-2는 N2HET이 수행 할 수있는 몇 가지 주요 작업, 즉 비교, 캡처, 각도 기능, 추가 및 이동을 보여줍니다. N2HET에는 비교 또는 카운터 값을 
보유하는 데 사용되는 5 개의 레지스터 (A, B, R, S 및 T)가 포함되어 있으며 N2HET 명령어에 사용됩니다. 데이터는 조작을 위해 레지스터 또는 
데이터 필드에서 가져올 수 있습니다. 마찬가지로, 데이터는 레지스터 또는 데이터 필드로 리턴 될 수있다.

23.2.1.1 타임 슬롯 및 분해능(해결?삭제?) 루프
각 명령은 특정 수의 사이클 또는 시간 슬롯을 필요로합니다. prescaler 비트 필드에 지정된 해상도는 타이머 정확도를 결정합니다. 모든 입력 캡처, 
이벤트 카운트 및 출력 비교는 각 해상도 루프에서 한 번 실행됩니다. HR I / O 핀에서 HR 캡처 및 비교가 가능합니다 (최대 N2HET 클록 정확도).
HR I / O 구조에 대한 자세한 내용은 23.2.5 절을 참조하십시오.

23.2.1.2 프로그램 루프 시간
프로그램 루프 시간은 명령 실행에 사용 된 모든 사이클의 합계입니다. 이 시간은 N2HET 프로그램이 조건부로 실행되는 명령어를 포함하면 루프마다 
다를 수 있습니다.
모든 해상도 루프에서 타이머 프로그램이 다시 시작됩니다. 시작 주소는 N2HET RAM 주소 00h로 고정됩니다. 완벽한 정확성을 보장하려면 프로그램을
통과하는 최장 경로가 하나의 루프 해결 기간 내에 있어야합니다.
프로그램의 마지막 명령은 고정 된 시작 주소 (다음 프로그램 주소 = 00h)로 다시 분기해야합니다. N2HET 프로그램이 루프 해결 기간 종료 전에 주소
00h로 다시 분기하면 N2HET은이를 감지하고 다음 루프 해결 기간이 시작될 때까지 명령 실행을 일시 중지합니다.
그림 23-3의 타이밍 다이어그램은 프로그램 흐름 실행을 보여줍니다.

23.2.1.3 명령어 실행 순서
N2HET 프로그램이 실행되면 N2HET가 켜진 후 루프 해결 클럭이 처음 발생합니다. 루프 해독의 첫 번째 및 후속 발생시 위치 주소 00h의 명령어가 
프리 페치됩니다. 프로그램 실행은 루프 해결 클럭 발생시 시작되고 프로그램이 00h 위치로 분기 할 때까지 명령 실행을 계속합니다. 명령은 00h 위치에서 
프리 페치되고 실행 플래그는 재설정됩니다. N2HET은 루프 해결 클럭이 발생할 때까지 명령 실행을 일시 중지하고 정상 실행을 다시 시작합니다.
N2HET 프로그램은 실행을 완료하고 다음 루프 해결 클럭이 발생하기 전에 주소 00h로 돌아가도록 작성해야합니다. N2HET 프로그램이이 실행 시간 제한을 
초과하면 섹션 23.2.1.4에서 설명한대로 프로그램 오버플로 조건이 발생합니다.

23.2.1.4 프로그램 오버 플로우 조건
프로그램 루프에서 사용되는 시간 슬롯의 수가 하나의 루프 해상도에서 사용 가능한 시간 슬롯 수를 초과하면 타이머는 HETEXC2 레지스터에있는 
프로그램 오버플로 인터럽트 플래그를 설정합니다. I / O 동기화를 유지하려면 정상적인 작동에서이 조건을 발생 시켜서는 안됩니다.
HETEXC2.PRGMOVRFLFLAG 플래그는 디버그 및 유효성 검사 단계에서 조건이 발생하지 않는지 확인하기위한 메커니즘을 제공합니다.

그림 23-4에서 알 수 있듯이 프로그램 오버플로가 발생하면 현재 실행중인 N2HET 프로그램 시퀀스가 중단되어 다음 루프 해결 클럭 기간이 시작될 때
N2HETaddress 0에서 다시 시작됩니다. 또한 HETEXC2.PRGMOVRFLFLAG가 설정됩니다.
오버플로를 유발 한 명령 (그림 23-4의 주소 0xC에있는 명령어)이 핀 동작을 선택하면이 핀 동작은 수행되지 않습니다. 그러나 레지스터 및 RAM 업데이트를 
포함한 명령의 다른 동작은 여전히 수행됩니다.

23.2.1.5 N2HET 프로그램의 아키텍처 제한 사항
N2HET 프로그램에는 특정 아키텍처 제한이 적용됩니다. 1. N2HET 프로그램의 크기는 하나의 명령보다 커야합니다. 2. 여분의 대기 상태는 실행될 
다음 명령어의 필드를 수정하는 명령어에 의해 발생합니다. 3. 고해상도 핀당 하나의 명령어 (고해상도 사용) 만 허용됩니다. 4. 연속 브레이크 포인트는
지원되지 않습니다. 중단 점이있는 명령어에는 명령어 두 개 이상이 있어야합니다 (예 : 주소가 1, 3, 5, 7 등일 때 프로그램이 선형으로 실행된다고 가정)

NOTE
단 하나의 명령어 인 N2HET 프로그램을 코딩하는 것은 드문 일이지만 제한 1의 요구 사항을 충족시키기 위해 그러한 프로그램을 수정하는 것은 간단합니다. 
프로그램에 두 번째 명령어를 추가하기 만하면됩니다. .
제한 3을 적용하기 위해 고해상도 핀 구조는 en_pin_action 필드가 ON인지 여부에 관계없이 hr_lr = HIGH로 해당 핀 번호와 일치하는 실행 된 첫 번째
명령에만 응답합니다. 후속 명령어는 루프 해결 기간의 나머지 동안 고해상도 핀 구조에 의해 무시됩니다.

23.2.1.6 다중 해상도 체계
N2HET는 N 개의 루프 해결 기간마다 한 번만 명령을 실행하여 카운터 너비를 가상으로 확장 할 수 있습니다. 이렇게하면 타이머 해상도가 감소하지만
느린 신호를 생성하거나 측정 할 때 유용 할 수있는 카운터 범위가 확장됩니다. 그림 23-5는 multi-resoluton 체계가 N2HET 프로그램에서 어떻게 
구현 될 수 있는지 보여준다. 각 저해상도 루프에서 MOV64 명령어를 사용하는 무조건 분기 명령어 및 인덱스 시퀀스는이 특정 프로그램 흐름을 제어하는데 
필요합니다.

NOTE
HR 명령은 정상적인 작동을 보장하기 위해 주 (최대 해상도) 루프에 배치해야합니다.

23.2.1.7 디버그 기능
N2HET은 중단 점을 지원하여 N2HET 프로그램을보다 쉽게 ​​디버깅 할 수 있도록합니다. 그림 23-6은 중단 점 메커니즘을 보여줍니다.
N2HET 중단 점을 활성화하는 단계는 다음과 같습니다. 
1.이 핀이 낮을 때마다 N2HET 중단 점이 비활성화되므로 장치 nTRST 핀이 하이인지 확인하십시오. (일반적으로 이것은 JTAG 디버거가 연결될 때 자동으로
처리됩니다.) 
2. JTAG 디버거를 연결하고 이미 디버깅해야하는 N2HET 코드로 프로그래밍 된 장치에 연결합니다. (온칩 플래시로 다운로드하는 것은이 절의 범위를 벗어난다). 
3. 적어도 N2HET 프로그램 RAM이 CPU에 의해 초기화 될 때까지 CPU 프로그램을 실행하십시오. 
4. N2HET 레지스터에서 메모리 창을 엽니다. 
5. NHETEXC2.DEBUGSTATUSFLAG가 지워 졌는지 확인하십시오. 
6. N2HET RAM에서 메모리 창을 엽니다. 
7. 중단하려는 명령어의 프로그램 필드에 비트 22를 설정합니다. 이 명령은 N2HET이 중지되기 전에 실행되며 CPU 중단 점이 작동하는 방식과 약간 다릅니다. 
8. CPU 및 N2HET이 실행 중인지 확인한 후 중단 된 경우 JTAG 에뮬레이터를 통해 CPU를 다시 시작합니다 (CPU가 시작될 때 N2HET가 시작됨). 
9. 중단 점에 도달하면 CPU와 N2HET가 모두 중단됩니다.

N2HET이 정지되면 상태 머신은 고정되지만 모든 N2HET 제어 레지스터는 JTAG 에뮬레이터 인터페이스를 통해 액세스 할 수 있습니다.

현재 N2HET 명령 주소는 HETADDR 레지스터를 읽음으로써 검사 될 수 있습니다; 이것은 중단 점을 유발 한 명령을 가리켜야합니다.

N2HET 내부 작업 레지스터 (A, B, R, S, T)는 JTAG 에뮬레이터 인터페이스를 통해 직접 볼 수 없습니다. 이러한 레지스터의 내용을 검사해야하는 경우 
레지스터 값을 N2HET RAM에 복사하는 MOV32와 같은 명령어를 추가하는 것이 가장 좋습니다. N2HET이 멈 추면이 RAM 위치를 검사 할 수 있습니다.

중지 된 상태에서 CPU와 N2HET의 실행을 다시 시작하려면 다음과 같이하십시오. 
1. NHETEXC2.DEBUGSTATUSFLAG를 지우십시오. 
2. 중단 점에 도달 한 명령어의 프로그램 필드에서 비트 22를 지웁니다. 
3. 일반적인 JTAG 에뮬레이터 절차 ( '실행'또는 '실행')를 통해 CPU를 다시 시작하십시오. N2HET은 CPU가 디버그 상태를 종료했을 때 자동으로 실행을 
시작합니다.

23.2.2 N2HET RAM 조직
N2HET RAM은 두 부분으로 구성됩니다. 첫 번째 프로그램은 N2HET 프로그램 자체를 포함합니다. 두 번째는 N2HET 프로그램의 패리티 보호 비트를 포함합니다.
각 N2HET 명령어는 96 비트 폭이지만 128 비트 경계에 정렬됩니다. 명령어는 프로그램, 제어 및 데이터라는 세 개의 32 비트 필드로 구성됩니다. 
명령은 128 비트 경계로 강제 정렬하기 위해 네 번째 구현되지 않은 주소로 구분됩니다.
N2HET 프로그램의 무결성은 패리티에 의해 보호 될 수 있습니다. 패리티 보호는 N2HET 패리티 제어 레지스터 (HETPCR)를 통해 가능합니다.
표 23-1은 N2HET RAM 및 N2HET 패리티 RAM의 기본 주소를 보여줍니다.

23.2.2.1 N2HET RAM 뱅킹
예를 들어 PWM의 듀티 사이클 값을 업데이트하는 것과 같이 N2HET이 실행되는 동안 CPU가 N2HET RAM을 업데이트해야하기 때문에 N2HET RAM 조직이
HOST CPU 및 N2HET에 의한 동시 액세스를 용이하게하는 방법을 이해하는 것이 중요합니다.
N2HET RAM은 96 비트 2 포트 RAM의 4 뱅크로 구현됩니다. 이것은 총 8 개의 포트가 있음을 의미합니다. 4 개의 읽기 및 4 개의 쓰기. 일반적으로 N2HET는 
한 번에 최대 2 개의 포트를 사용합니다. 하나의 판독 포트는 N2HET이 다음 N2HET 명령을 프리 페치 (prefetch)하도록 허용하는 반면, 기입 포트는
현재 명령을 실행 한 결과로서 변경된 데이터 또는 제어 필드를 업데이트하는데 사용될 수 있다.

자체 내부 RAM에 대한 N2HET 액세스는 외부 호스트 (CPU 또는 DMA)에서의 액세스보다 우선 순위가 높으므로 N2HET 프로그램 실행이 결정적으로 
타이머의 중요한 요구 사항이됩니다.

대부분의 N2HET 명령어는 단일 사이클로 실행됩니다. 대기 상태가 N2HET 프로그램 실행 시간에 영향을 미치는 경우는 다음과 같습니다.
• 현재 N2HET 명령은 실행 순서의 다음 N2HET에 데이터를 다시 씁니다. 
• 외부 호스트는 자동 읽기 - 지우기 옵션이 설정된 N2HET 명령어에서 N2HET이 동일한 주소에서 실행되는 동안 (23.2.4.3 절 참조) 읽습니다.
자동 읽기 클리어의 경우를 제외하고는 호스트와 N2HET이 뱅크 충돌을 일으킬 때 외부 호스트가 정지합니다. 
그러나 이는 일반적으로 N2HET 주소 최하위 비트 경계에 구성된 N2HET 뱅크 순서 지정으로 인해 한 사이클의 정지를 초래합니다 (표 23-2 참조).

대부분의 N2HET 프로그램이 N2HET 주소 공간을 통해 선형 적으로 실행된다고 가정하십시오. 은행 갈등이 존재하는 경우 N2HET 프로그램이 다음 
은행으로 이동함에 따라 다음주기에 해결됩니다. N2HET 프로그래머는주기마다 N2HET RAM의 동일한 뱅크에 액세스하는 프로그램을 작성하지 않아야합니다. 
그러면 외부 호스트를 N2HET 메모리에서 완전히 잠글 수 있습니다.

표 23-2는 N2HET에서 볼 수있는 N2HET 메모리 맵과 호스트 CPU 및 DMA의 메모리 공간을 설명합니다.

NOTE
외부 호스트 인터페이스는 읽기 액세스 크기를 지원하지만 N2HET RAM에 대한 32 비트 쓰기 만 지원됩니다. 예약 된 주소는 액세스 할 수 없으므로 결과가 
불확정합니다.

23.2.2.2 패리티 검사
N2HET 모듈은 N2HET RAM의 패리티 오류를 감지 할 수 있습니다. 섹션 23.2.2에서 설명한 것처럼 N2HET는 32 비트 쓰기 만 허용합니다. 
따라서 N2HET RAM 패리티 검사는 N2HET RAM의 32 비트 필드 당 하나의 패리티 비트를 사용하여 구현됩니다.

N2HET 패리티 감지를위한 짝수 또는 홀수 패리티 선택은 시스템 모듈에서 구성 할 수 있습니다. 패리티 계산 및 검사는 HETPCR의 4 비트 키로 
활성화 / 비활성화 할 수 있습니다.
N2HET RAM에 대한 읽기 액세스 중에 RAM에서 읽은 데이터를 기반으로 패리티가 계산되고 패리티 비트에 저장된 양호한 패리티 값과 비교됩니다. 
패리티 검사는 N2HET 실행 장치가 N2HET RAM에 대한 읽기 액세스를 수행 할 때 수행되지만 다른 마스터 (예 : CPU, HTU, DMA)가 읽기 액세스를 
수행하는 경우에도 수행됩니다. 32 비트 워드가 패리티 검사에 실패하면 오류가 ESM 모듈에 신호됩니다. 오류를 생성 한 N2HET 주소가 감지되고 
호스트 시스템 디버깅을 위해 HETPAR에 캡처됩니다. 주소는 버스 마스터가 읽을 때까지 업데이트되지 않습니다.

N2HET 실행 유닛은 96 비트 폭의 명령어를 읽습니다. 여기에는 각각 32 비트 폭의 프로그램, 제어 및 데이터 필드가 있습니다. 따라서 N2HET 명령어를
페치 할 때 패리티 검사는 세 단어에 대해 병렬로 수행됩니다.

동일한 사이클에서 두 개 이상의 단어로 패리티 오류가 감지되면 하나의 주소 (하위 주소의 단어) 만 캡처됩니다. 캡처 된 N2HET 주소는 항상 32 비트 
단어 경계에 맞춰집니다.
디버그 중에도 패리티 검사는 온칩 호스트 CPU 및 DMA에서 시작된 액세스에서 계속 수행됩니다. 그러나 디버거 자체에서 시작된 액세스 중에 감지 된
패리티 오류는 무시됩니다.

23.2.2.3 패리티 오류 감지 작업
N2HET 패리티 오류가 감지되면 다음 조치가 발생합니다. 1. 오류가 ESM 모듈에 신호됩니다. 2. 패리티 주소 레지스터 (HETPAR)에 오류 N2HET 필드의 
주소가로드됩니다. 3. N2HET 실행이 즉시 중단됩니다. (패리티 오류를 유발 한 명령은 실행되지 않습니다.) 4. N2HET 전역 구성 레지스터 (HETGCR)의 
켜기 / 끄기 비트가 자동으로 지워집니다. 5. 모든 N2HET 내부 플래그가 지워집니다. 6. N2HET 패리티 핀 레지스터 (HETPPR)에 의해 
선택된 모든 N2HET 핀은 사전 정의 된 안전 상태로 들어갑니다. 7. HETDOUT 레지스터는 HETPPR로 인한 핀 상태의 변화를 반영하도록 업데이트됩니다.
HETPPR 레지스터를 통해 선택된 N2HET 핀의 안전 상태는 핀이 HETDIR, HETPDR 및 HETPSL 레지스터에 구성된 방법에 따라 다릅니다. 
표 23-3은 안전 상태가 결정되는 방법을 설명합니다.

23.2.2.4 패리티 검출 논리 테스트
패리티 검출 로직을 테스트하려면 패리티 RAM에 진단 프로그램이 패리티 오류를 삽입 할 수 있도록 CPU에 액세스 가능하게해야합니다. 
제어 레지스터 비트 HETPCR.TEST는 패리티 RAM을 액세스 가능하게 설정해야합니다. HETPCR.TEST가 설정되면 표 23-4에 설명 된대로 패리티 비트에 
액세스 할 수 있습니다.

각 32 비트 N2HET 필드는 표 23-4에 나와있는 것처럼 N2HET 패리티 RAM에 자체 패리티 비트를 가지고 있습니다. 이 필드에는 물리적인 N2HET RAM이 
없으므로 예약 된 필드에 대한 패리티 비트가 없습니다.

23.2.2.5 패리티 RAM 초기화
장치의 전원이 켜지면 패리티 비트를 포함한 N2HET RAM 내용을 보장 할 수 없습니다. RAM의 전원이 켜지는 임의의 상태로 인한 잘못된 패리티 오류를 
방지하려면 RAM을 초기화해야합니다.

N2HET RAM을 초기화하기 전에 HETPCR에 기록하여 N2HET 패리티 논리를 활성화하십시오. 그런 다음 N2HET 명령어 RAM을 초기화해야합니다. 
패리티가 활성화 된 상태에서 N2HET 패리티 RAM은 N2HET 명령 RAM이 CPU에 의해 초기화되는 동시에 N2HET에 의해 자동으로 초기화됩니다. 
N2HET 프로그램을 패리티 사용 가능으로로드하는 것도 효과적입니다.

N2HET 메모리와 패리티 비트를 초기화하는 또 다른 방법은 시스템 모듈을 사용하여 마이크로 컨트롤러에있는 모든 RAM의 자동 초기화를 시작하는 것입니다.
RAM은 '0'으로 초기화됩니다. 짝수 / 홀수 패리티 선택에 따라 패리티 비트가 그에 따라 계산됩니다.

23.2.3 타임베이스
모든 N2HET 타이밍은 VCLK2에서 파생됩니다 (그림 23-7 참조). 내부 N2HET 명령어는 VCLK2 속도로 실행됩니다. 타이머 루프 클럭과 고해상도 하드웨어
타이머 클럭은 VCLK2에서 축소 될 수 있습니다. 프로그램 루프를위한 타이머 루프 분해능 클록과 HR I / O 카운터의 고분해능 (HR) 클럭을 조정하기 위해 
2 개의 프리스케일러를 사용할 수 있습니다. 
• 시간 슬롯 : 루프 당 명령 실행에 사용할 수있는 사이클 수입니다. 시간 슬롯은 루프 해결 클럭의 VCLK2 사이클 수입니다. 
• 고해상도 클럭 : 고해상도 클럭은 핀이 상태를 변경하거나 입력 신호의 경우 측정 할 수있는 최소 시간 증가분입니다. 6 비트 HR 사전 스케일 계수
코드 (HETPFR)에 저장된 사용자 정의 HR 사전 스케일 분할 속도 (hr)로 VCLK2를 나누는 6 비트 프리스케일러. 표 23-5를 참조하십시오. 
• 루프 해결 클럭 : 루프 해결 클럭은 N2HET 프로그램의 모든 명령어를 실행하기위한 타임베이스를 정의합니다. 명령어는 조건부로 실행될 수 있으므로 
N2HET 프로그램을 통과하는 가장 긴 경로는 하나의 루프 해상도 클럭주기 (LRP)에 맞아야합니다. 사용자 정의 루프 해상도 사전 설정 분할 속도 (lr)로
HR클록을 나누는 3 비트 프리스케일러 3 비트 루프 해상도 사전 계수 코드 (HETPFR). 표 23-5를 참조하십시오.

이 문서에는 다음과 같은 약어 및 관계가 사용됩니다.
1. 시간 : 고해상도 사전 계수 (1, 2, 3, 4, ..., 63, 64)
2. lr : 루프 분해능 사전 계수 (1, 2, 4, 8, 16, 32, 64,128)
3. ts : 루프 당 명령 실행에 사용할 수있는 시간 슬롯 (사이클)입니다. ts = hr x lr
4. HRP = 고해상도 클록주기 HRP = hr · TVCLK2 (ns)
5. LRP = 루프 분석 클록주기 LRP = lr · HRP (ns)

루프 해결 기간 (LRP)은 N2HET 프로그램을 통해 최악의 실행 경로를 완료하는 데 필요한 시간 슬롯 수 (VCLK2주기)보다 커야합니다. 
그렇지 않으면 프로그램 오버 플로우 조건이 발생할 수 있습니다 (23.2.1.4 절 참조). hr과 lr을 늘리면 위의 3 번 항목에서 설명한 시간 슬롯과 
lr 프리스케일러의 관계로 인해 프로그램 실행에 사용할 수있는 시간 슬롯 수가 늘어납니다. 그러나 시간이 증가하면 타이머 해상도가 감소하므로 고해상도
IO 구조에 대한 클럭이 감소하므로 일반적으로 lr이 먼저 증가합니다.
나누기 비율 hr과 lr은 HETPFR 레지스터에서 정의 할 수 있습니다. 표 23-5에는 prescale 옵션에 대한 비트 필드 인코딩이 나열되어 있습니다.


23.2.3.1 Loop Resolution 결정
예를 들어, HRP = 62.5 ns의  high resolution과 LRP = 8 μs의 loop resolution이 필요하며 N2HET application program(응용 프로그램)을 위해
최소 250 개의 time slot이 필요한 program을 고려하십시오. VCLK2 = 32 MHz라고 가정 할 때, 다음은 어떤  divide-by rates(분할 비율)과 
Prescale Factor Register (HETPFR)의 어떤 값이 위의 요구 사항에 필요한지 보여줍니다.

hr = 2 -> HRP = hr/VCLK2 = 2/32MHz= 62.5ns

lr =128 lr x HRP = 128 x 62.5ns = 8 μs

ts = hr x lr = 2 x 128 = 256

hr = 2, lr = 128 HETPFR[31:0] = 0x00000701
(31)

위의 예에서 loop resolution period을 8 μs에서 4 μs로 줄이면 프로그램 실행에 128 개의 time slot 만 사용할 수 있습니다. 
프로그램은 23.2.1.6 절에 제안된 대로 재구성되어야 할 수도 있습니다.


23.2.3.2 The 7-Bit HR Data Field
ECMP (Section 23.2.5.9), MCMP (Section 23.2.5.10), PCNT (Section 23.2.5.12), PWCNT (Section 23.2.5.11) 및 WCAP (Section 23.2.5.13)의 
명령어실행 예제는 7- bit HR 데이터 필드는 하나의 N2HET 루프 LRP 내에서 LRP의 시작과 관련하여 high resolution delay (HR delay)을 생성하거나 
측정 할 수 있습니다. 마지막 절은 다음과 같다 : 

LRP = lr × HRP

N2HET loop resolution clock period (LRP) 내에는 high resolution clock period (HRP)가 있습니다. lr = 128 인 경우 HR delay은 LRP 내의
0 ~ 127 HRP 클록의 범위를 가질 수 있으며 HR 데이터 필드의 모든 7 비트가 필요합니다. LRP (loop resolution clock period)에 기반한 
측정 및 트리거링 이벤트로 제한되는 대신 HR 확장을 사용하면 측정 및 이벤트를 LRP의 분수로 (LRP의 1/128까지) 설명 할 수 있습니다. 유일한 제한은 
각 loop resolution period 동안 핀 당 최대 1 개의 HR delay을 지정할 수 있다는 것입니다.

표 23-6은 lr이 128보다 작은 경우 HR data filed의 어떤 비트가 high resolution IO 구조에서 사용되지 않는지를 보여줍니다. 이 경우 HR data filed의 
non-relevant(관련없음) 비트 (LSB)는 다음 중 하나입니다 : 
• HR capture (PCNT, WCAP)의 경우 0으로 작성 
• HR compare의 경우 0으로 해석 (ECMP, MCMP, PWCNT의 경우)


23.2.4 Host Interface
host interface는 타이머 RAM과 N2HET RAM에 액세스하는 마스터 간의 모든 통신을 제어합니다. 여기에는 다음과 같은 구성 요소가 포함됩니다.

23.2.4.1 Host Accesses to N2HET RAM
host interface는 N2HET RAM에 대한 다음과 같은 유형의 액세스를 지원합니다. 
• 8, 16 또는 32 비트의 읽기 액세스 
(• Read accesses of 8, 16, or 32 bits )
• 23.2.4.2 절에 설명 된 shadow register sequence를 따르는 64 비트의 읽기 액세스. 
(• Read accesses of 64-bits that follow the shadow register sequence described in Section 23.2.4.2. )
• 32 비트의 쓰기 액세스
(• Write accesses of 32 bits)
외부 호스트가 8 비트 또는 16 비트를 N2HET RAM에 씁니다.
     
23.2.4.2 64-bit Read Access (64 비트 읽기 액세스)
동일한 마스터 (예를 들어, CPU, DMA 또는 임의의 다른 마스터)에 의해 수행되는 동일한 명령 (n)의 제어 필드 CF (n) 및 데이터 필드 DF (n)의 
연속적인 판독은 항상 동시 64 비트 읽기 액세스. 이는 CF (n)가 읽히는 동시에 DF (n)이  shadow register 에 로드된다는 것을 의미합니다. 따라서 
두 번째 액세스는 N2HET RAM 대신 DF (n)을  shadow register에서 읽습니다.
일반적으로 한 마스터의 64 비트 읽기 액세스는 다른 마스터의 64 비트 읽기 액세스로 인터럽트 될 수 있습니다. 총 3 개의  shadow register가 
사용가능합니다. 따라서 최대 3 개의 마스터가 인터리브 된 방식으로 64 비트 읽기를 수행 할 수 있습니다 (마스터 1 CF, 마스터 2 CF, 마스터 3 CF, 
마스터 1 DF, 마스터 2 DF, 마스터 3 DF).
3 개의  shadow register가 모두 활성화되고 4 번째 마스터가 CF 또는 DF 읽기를 수행하면 주소 오류가 발생하고 RAM 액세스가 발생하지 않습니다. 
이러한 액세스 유형은 사용 가능한  shadow register resource가 필요하지 않으므로 네 번째 마스터 (PF 필드에서 읽거나 필드에서 읽음)에 의한 다른 
액세스 유형이 발생합니다.
     
     
23.2.4.3  Automatic Read Clear Feature (자동 읽기 지우기 기능)
N2HET은 외부 호스트 CPU (또는 DMA)가 데이터 필드를 읽은 직후 자동으로 데이터 필드를 지우는 기능을 제공합니다. 이 기능은 제어 필드 (비트 C26)에 
있는 제어 비트를 통해 구현됩니다. 이것은 모든 명령어에서 사용할 수있는 정적 비트이며 N2HET 명령어에 옵션 (control = ON)을 추가하여 N2HET 
프로그램에 지정됩니다. 자동 읽기 지우기 기능은 23.2.4.2 절에 설명 된 순서에 따라 32 비트 및 64 비트 읽기 모두에 대해 작동합니다.
호스트 CPU가 해당 명령어의 데이터 필드를 읽으면 현재 데이터 값이 호스트 CPU로 반환되지만 필드는 읽기의 부작용으로 자동으로 지워집니다. 마스터가
현재 실행중인 명령어에서 데이터를 읽는 경우 새 캡처 결과가 저장되며 자동 읽기 지우기 기능보다 우선 순위가 높아 새로운 캡처 결과가 손실되지 않습니다.

자동 읽기 지우기 기능이 유용한 경우의 예로서 PCNT 명령을 고려하십시오. 이 명령이 자동 읽기 지우기로 구성되어 있으면 호스트 CPU가 PCNT 데이터 필드를 
읽을 때 자동으로 지워집니다. 호스트 CPU는 PCNT 데이터 필드를 다시 폴링 할 수 있으며 필드 값이 0이면 호스트 CPU 프로그램은 새로운 캡처 이벤트가 
발생하지 않았 음을 알게됩니다. 데이터 필드가 지워지지 않으면 호스트 CPU가 데이터 필드가 이전 캡처 이벤트의 데이터를 보유하고 있는지 또는 같은 값을 
가진 새로운 캡처 이벤트의 데이터인지 여부를 판단 할 수 없습니다.
     
23.2.4.4  Emulation Mode
소프트웨어 디버거에서 사용되는 에뮬레이션 모드는 global configuration register에 지정됩니다. 호스트 CPU 디버거가 중단점에 도달하면 CPU는 
일시 중단 신호를 모듈에 보냅니다. 두 가지 작동 모드가 제공됩니다 : 일시 중단 및 일시 중단 무시.
  • Suspend(일시 중지)
일시 중지가 발행되면 현재 타이머 명령의 끝에서 타이머 조작이 중지됩니다. 그러나 CPU가 타이머 RAM에 액세스하거나 제어 레지스터가 자유롭게 실행됩니다.
  • Ignore suspend(일시 중지 무시)
타이머 RAM은 일시 중지 신호를 무시하고 정상적으로 실시간으로 작동합니다.
     
23.2.4.5 Power-Down
Global Configuration Register (HETGCR)에서  turn-off bit를 설정 한 후,
N2HET을 Power-Down 모드로 설정하기 전에 타이머 프로그램 루프가 끝날 때까지 지연시켜야한다. 이것은 장치의 GCM (Global Clock Module)에서 
N2HET 클럭 소스를 비활성화하기 전에 N2HET 현재 주소 (HETADDR)가 0이 될 때까지 대기함으로써 수행 할 수 있습니다.
     
23.2.5 I / O 제어
N2HET에는 최대 32 개의 핀이 있습니다. 사용 가능한 N2HETIO의 수에 대한 정보는 장치 별 데이터 시트를 참조하십시오. 사용 가능한 모든 N2HET 핀은 
입력 또는 출력으로 프로그래밍 할 수 있습니다.
     
이 32 I / O는 핀 HET [31] ~ HET [0]에 연결된 동일한 구조를 가집니다. I / O 제어에 대한 설명은 그림 23-8을 참조하십시오. 또한 32 개 I / O에는 
모두 HR 클럭을 기반으로하는 특수 HR 구조가 있습니다. 이 구조는 모든 N2HET 명령어가 이러한 I / O 중 하나를  loop resolution 또는 
high resolution accuracy 정확도로 사용할 수 있도록합니다.
     
N2HET [0] ~ N2HET [0] 핀은 N2HET Data Input Register (HETDIN) , N2HET Data Output Register (HETDOUT), N2HET Data Set Register (HETDSET) 
또는 읽기 용 N2HET 데이터 입력 레지스터 수행 할 작업의 유형에 따라 쓰기를위한 N2HET  N2HET Data Clear Register (HETDCLR) 범용 입력으로 사용되는
N2HET 핀은 각 VCLK2 기간에 샘플링됩니다.
     
23.2.5.1  Using General Purpose I/O Data Set and Clear Registers
(범용 I / O 데이터 세트 및 지우기 레지스터 사용)
 N2HET Data Clear Register (HETDCLR) 및 N2HET Data Set Register (HETDSET)를 사용하여 주변 장치에 대한 액세스 수를 최소화하여 
출력 레지스터 및 출력 핀을 수정할 수 있습니다. 애플리케이션이 다른 핀의 값을 변경하지 않고 일부 N2HET 핀 핀을 설정하거나 재설정해야하는 경우,
첫 번째 가능성은  N2HET Data Output Register (HETDOUT)를 읽고, 내용 (AND, OR 등)을 수정하고, 결과를  N2HET Data Output Register (HETDOUT). 
에 출력한다. 그러나 이 읽기 - 수정 - 쓰기 시퀀스는 데이터 일관성 문제를 일으키는 동일한 레지스터를 수정하는 다른 기능에 의해 중단 될 수 있습니다.
     
N2HET Data Set Register (HETDSET) 또는  N2HET Data Clear Register (HETDCLR) 를 사용하여 응용 프로그램은 마스크 s값 
(첫 번째 옵션과 동일한 마스크 값)을 레지스터에 써서 원하는 핀을 설정하거나 재설정해야합니다. HETDSET 및 HETDCLR에 0으로 기록 된 비트는 변경되지
않고 남아 있기 때문에 읽기 - 수정 - 쓰기 접근법의 일관성 문제를 피할 수 있습니다.
     

23.2.5.2  Loop Resolution Structure (루프 해상도 구조)
N2HET은 명령 세트의 방법에 따라 입력/또는 출력으로 N2HET [31 : 0] 핀을 사용합니다. 사실, 각 핀은 N2HET 프로그램을 모니터링하거나 N2HET 프로그램으로
모니터링 할 수 있습니다. N2HET의 I / O 레지스터를 사용하면 CPU가 N2HET 프로그램 흐름과 상호 작용할 수 있습니다.
N2HET 프로그램에 의해 동작 (설정 또는 재설정)이 핀에서 취해지면 N2HET은 다음 Loop Resolution 클럭의 상승 에지에서 핀을 수정합니다.
N2HET I / O 핀에서 이벤트가 발생하면 루프 해 상도 클록의 다음 상승 에지에서 이벤트가 고려됩니다.
각 핀의 구조는 그림 23-9에 나와 있습니다.
그림 23-10의 예는 루프 해상도 정확도를 갖는 간단한 PWM 생성을 보여줍니다. 해당 프로그램은 다음과 같습니다.
     
CNT 및 ECMP 명령은  loop resolution cycle마다 한 번 실행됩니다. CNT 명령이 실행되면 지정된 레지스터 (A)와 CNT 명령 데이터 필드가 모두 1 씩 
증가합니다. 다음으로 ECMP가 실행되고 ECMP의 데이터 필드가 지정된 레지스터 (A)와 비교됩니다. 두 값이 일치하면 다음 루프 결정 사이클에서 핀 동작 
(이 경우 PULSEHI)이 수행됩니다. CNT는 각 루프 분석주기를 계속 증가시킵니다. 데이터 필드가 오버플로되면 (최대 +1) Z- 플래그가 CNT 명령에 의해 
설정됩니다. 다음 루프 분석 사이클에서 Z- 플래그가 평가되고 설정되면 반대의 핀 동작이 수행됩니다. Z- 플래그는 하나의 루프 분석주기 동안만 
활성화됩니다.
     
23.2.5.3  High Resolution Structure(고해상도 구조)
32 개 I / O는 모두 HR 클럭을 기반으로 HR 구조를 제공합니다. HR 클럭 주파수는 Prescale Factor Register (HETPFR)를 통해 프로그래밍됩니다. 
표준 I / O 구조 외에도 모든 핀은 HR 하드웨어가있어 HR 입력 캡처 (HR 명령어 PCNT 또는 WCAP 사용) 또는 
HR 출력 비교 (HR 명령어 ECMP, MCMP 또는 PWCNT 사용)로 사용할 수 있습니다. .
     
다섯 가지 HR 명령 (PCNT, WCAP, ECMP, MCMP 및 PWCNT)에는 HR 필드를 무시하여 HR 모드 또는 표준 해상도 모드에서 작동 할 수 있도록 
전용 hr_lr 비트 (고해상도 / 저해상도, 프로그램 필드 비트 8)가 있습니다. 기본적으로 hr_lr 비트 값은 0으로 HR 작업 모드를 의미합니다. 
그러나 이 비트를 1로 설정하면 단일 HR 핀에서 여러 HR 명령을 사용할 수 있습니다. 하나의 명령 만 HR 모드 (비트 0으로 지워짐)에서 작동하도록 
허용되지만 다른 명령은 표준 해상 모드 (비트 1로 설정)에서 사용될 수 있습니다.
     
23.2.5.4 HR 블록 다이어그램
HR 명령어가 주어진 핀에서 실행될 때마다, 해당 핀에 대한 HR 구조가 프로그래밍에 의해 주어진 정보로 프로그래밍됩니다. 
(HR 기능이 수행 할 에지와 동작을 취해야하는 에지). 각 핀의 HR 구조는 명령어의 핀 선택 필드를 디코딩하고 일치하는 경우 HR 구조를 프로그래밍합니다.
     
note
각 N2HET 핀에 대해 high resolution operation(hr_lr = HIGH)을 지정하는 명령어는r loop resolution period 당 하나만 실행할 수 있습니다. 
여기에는 (hr_lr = HIGH) (en_pin_action = OFF) 인 모든 명령어가 포함됩니다.
특정 핀을 실행하고 지정하는 첫 번째 high resolution instruction은 현재 loop resolution period 의 끝까지 동일한 핀에서 작동하는 후속
high resolution instructions을 잠급니다.
     
23.2.5.5  HR Structures Sharing (Input) (HR 구조 공유 (입력))
HR  HR Share Control Register (HETHRSH)를 사용하면 두 HR 구조가 입력 캡처용으로 만 동일한 핀을 공유 할 수 있습니다. 이 비트가 설정되면 
HR 구조 N 및 N + 1은 핀 N에 연결됩니다. 이 구조에서 범용 I / O 핀 N + 1은 계속 사용할 수 있습니다. 그림 23-12를 참조하십시오.
그림 23-12. N2HET 핀 0/1에 대한 HR 구조 공유 예제
     
다음 프로그램은 HR 공유 기능 (HET [0] HR 구조 및 HET [1] HR 구조 공유)을 PCNT 명령에 사용하는 방법을 보여줍니다.
     
HET [1] HR 구조는 HET [0] 핀에도 연결됩니다. L00_PCNT 데이터 필드는 하이 펄스를 포착 할 수 있으며 L01_PCNT는 동일한 핀 (N2HET [0] 핀)에서 
로우 펄스를 포착합니다.
     
23.2.5.6 AND / XOR 공유 HR 구조 (출력)
일반적으로 N2HET 설계는 하나의 HR 구조로 하여금 출력 핀으로 구성된 핀에서 HR 에지를 생성하도록 허용합니다. HETXOR 레지스터는 두 개의 연속적인 
HR 구조 N (짝수) 및 N + 1 (홀수)의 출력 신호의 논리적 XOR을 허용합니다. 그림 23-13을 참조하십시오. 이러한 방식으로 두 에지가 두 개의 독립적인 
HR 구조로 생성 될 수 있기 때문에 루프 해상도 클록보다 작은 펄스를 생성 할 수 있습니다. 이는 대칭 PWM에 특히 필요합니다. 그림 23-14를 참조하십시오.
하드웨어는 2 개의 연속 핀의 HR 구조의 출력에 연결된 XOR 게이트를 제공합니다. 이 구조에서, 핀 N + 1은 범용 입 / 출력을 위해 이용 가능합니다.
그림 23-13. XOR 공유 HR I / O
     
다음 N2HET 프로그램은 대칭 PWM의 한 채널에 대한 예제를 제공합니다. 생성 된 타이밍은 그림 23-14에 나와 있습니다.
     
N2HET이 예제 프로그램의 설정 및 출력 신호 계산 :
  • 핀 HET [0]과 HET [1]은 XOR 공유입니다.
• HETPFR [31 : 0] 레지스터 = 0x700 : lr = 128, hr = 1, 시간 슬롯 ts = 128
• PWM주기 (CNT_max 필드로 결정) = (22 + 1) • LRP = 2944 HRP
• lr = 128 인 경우 LRP = 128 • HRP가있는 경우 (HET [0] XOR HET [1])의 하이 펄스 길이 = LH = (17 · LRP + 115 · HRP) - (5 · LRP + 13 · HRP) ,
  그래서 LH = (2291 - 653) · HRP = 1638 HRP
• 듀티 사이클 = DC = LH / PWM_period = 1638 HRP / (2944 • HRP) = 55.6 %
     
그림 23-14는 XOR 공유 기능의 구현을 그래픽으로 보여줍니다. 처음 2 개의 파형 (대칭 카운터 및 CNT)은 대칭 카운터와 비대칭 카운터를 보여줍니다. 
대칭 카운터는 대칭 축을 강조 표시하기 위해 표시되며 N2HET에는 구현되지 않습니다. 비대칭 카운터는 CNT 명령으로 구현되며 대칭 카운터의 기간으로 
설정해야합니다. 다음 두 파형 (HR [0] 및 HR [1])은 HR 구조의 출력을 나타내며, XOR 게이트가 HET [0] 핀에서 PWM 출력을 생성하기위한 입력입니다. 
신호 HET [0]의 펄스는 대칭축을 중심으로 중심에 위치합니다.
그림 23-14. 대칭 PWM 및 XOR 공유 출력
     
대안으로, HR 구조는 핀 구조의 효과를 결합하는 논리적 AND 함수를 사용하여 공유 될 수 있습니다. HETAND는 두 개의 연속적인 HR 구조 N (짝수)와 
N + 1 (홀수)를 공유 할 수 있습니다. 그림 23-15를 참조하십시오. 이 구조에서, 핀 N + 1은 범용 입 / 출력을 위해 이용 가능합니다.
     
23.2.5.7  Loop Back Mode
N2HET 출력 신호를 모니터링하기 위해 응용 프로그램에서 LoopBack 기능을 사용할 수 있습니다. 예를 들어, PWM이 HR 구조 0에 의해 생성 된 경우 HR 구조
1에 할당 된 PCNT 명령은 PWM 출력 신호의 펄스 길이 또는 주기를 다시 측정 할 수 있습니다.
LoopBack 모드는 해당 구조 쌍에 대한 HETLBPSEL 레지스터에서 LBPSEL [x]를 '1'로 설정하여 두 개의 고해상도 구조 사이에서 활성화됩니다. 구조 쌍의 
두 구조 사이의 LoopBack 방향은 HETLBPDIR 레지스터의 LBPDIR [x] 값에 의해 결정됩니다.
예를 들어, 비트 LBPSEL [0]이 '1'로 설정된 경우 HR 구조 0과 1은 LoopBack 모드에서 내부적으로 연결됩니다. 비트 LBPDIR [0]이 '0'으로 설정되면 
구조체 0이 입력이되고 구조체 1이 출력이됩니다.
     
디지털 LoopBack
디지털 LoopBack 모드는 해당 구조 쌍에 대한 HETLBPSEL 레지스터에서 LBPTYPE [x]를 '0'으로 설정하여 활성화됩니다. 디지털 LoopBack 모드에서 
구조 쌍은 직접 연결되고 출력 버퍼는 바이 패스됩니다. 따라서 LoopBack 값은 해당 핀에 표시되지 않습니다. 그림 23-16은 HR0과 HR1 구조 사이의 
디지털 LoopBack의 예를 보여줍니다. LBSEL [0]은 '1'로 설정되어 두 구조 간에 LoopBack을 활성화합니다. LBTYPE [0]은 '0'으로 설정되어 LoopBack 쌍에
대한 디지털 모드를 선택합니다. LPBDIR [0] 값은 HR 블록 중 어느 것이 출력되고 어떤 것이 입력되는지를 선택하여 LoopBack의 방향을 결정합니다. 
굵은 선은 디지털 LoopBack 경로를 나타냅니다.
     
아날로그 LoopBack
아날로그 LoopBack 모드는 해당 구조 쌍에 대한 HETLBPSEL 레지스터에서 LBPTYPE [x]를 '1'로 설정하여 활성화됩니다. 아날로그 LoopBack 모드에서 
구조 쌍은 출력 버퍼 외부에 연결됩니다. 따라서 LoopBack 값은 해당 핀에 표시됩니다. 그림 23-17은 HR0과 HR1 구조 사이의 아날로그 LoopBack의 
예를 보여줍니다. LBSEL [0]은 '1'로 설정되어 두 구조간에 LoopBack을 활성화합니다. LBTYPE [0]은 '1'로 설정되어 LoopBack 쌍에 대한 아날로그 모드를 
선택합니다. LPBDIR [0] 값은 HR 블록 중 어느 것이 출력되고 어떤 것이 입력되는지를 선택하여 LoopBack의 방향을 결정합니다. 굵은 선은 
아날로그 LoopBack 경로를 나타냅니다.
note
• 루프 백 방향은 HETDIR 레지스터 설정과 관계없이 선택할 수 있습니다. 
• N2HET 출력 핀 동작에 의해 구동되지 않는 핀은 여전히 일반 GIO 핀으로 사용될 수 있습니다.
     
23.2.5.8 Edge Detection Input Timing(Edge 검출 입력 타이밍)
N2HET에 의해 정확하게 포착되기 위해서는 입력 신호에 대한 몇 가지 타이밍 요구 사항이 있습니다. 그림 23-18은 이러한 요구 사항을 보여 주며
표 23-7 (Loop Resolution) 및 표 23-8 (고해상도)에 설명 된 최소 및 최대값을 사용합니다.
