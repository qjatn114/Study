* Abstract

TI 의 Hercules MCU 제품군은 고급 ARM 아키텍처와
풍부한 Peripheral 집합을 갖춘 32 비트 RISC MCU 제품군이다.

이 애플리케이션 보고서는 CAN 노드를 구성하고
Network 를 통해 CAN 통신을 수행하는 일반적인 절차에 대해 설명한다.



1. Introduction

1.1. Controller Area Network(CAN)

Controller Area Network 는 높은 수준의 보안
및 최대 1 Mbps 의 통신 속도로 분산된 실시간 제어를
효율적으로 지원하는 직렬 Multi-Master 통신 프로토콜이다.

CAN 버스는 안정적인 통신이 필요한 자동차 및 기타 산업 분야와 같이
잡음이 많고 까다로운 환경에서 작동하는 애플리케이션에 이상적이다.

Peripheral 은 아래 기능을 지원한다.

* 프로토콜:
  - CAN 프로토콜 버전 2.0 파트 A, B 지원

* 클록 및 속도:
  - 최대 1 MBit/s 의 비트 전송률
  - 듀얼 클록 소스

* 메시지 객체 / 메시지 상자:
  - 16, 32, 64 또는 128 메시지 객체(장치 고유)
  - 각 메시지 객체에 대한 개별 식별자 매스크
  - 메시지 객체를 위한 프로그래밍 가능한 FIFO 모드

* 인터럽트:
  인터럽트 모듈에 2 개의 인터럽트 라인

* 저전력 지원:
  - 글로벌 전원 차단 및 웨이크 업 지원
  - 로컬 전원 차단 및 웨이크 업 지원

* 버스트 전송 지원:
  - DMA 를 통한 데이터 전송

* 디버그 지원:
  - 자체 테스트 작동을 위한 프로그래밍 가능한 루프백 모드
  - 테스트 모드에서 메시지 RAM 에 직접 접근
  - 디버그 지원을 위한 일시 중단 모드

* 기타:
  - 프로그램 가능한 32 비트 타이머에 의한 버스 오프 상태 후 자동 버스 온
  - 범용 IO 핀으로 구성 할 수 있는 CAN Rx / Tx 핀



1.2. CAN Transceiver Interface Diagram

Figure 1 은 전형적인 CAN 트랜시버 인터페이스를 보여준다.



1.3. Typical CAN Network



1.4. CAN Block Diagram

Figure 3 은 CAN 제어기의 핵심 내부 블록을 보여준다.



2. Initializing the CAN Peripheral

아래와 같은 공통 단계가 CAN 초기화에 포함 된다.

* CAN RAM 초기화(부팅 중에 권장)
* CAN 구성
* CAN 보드 속도 구성

CAN 을 초기화 한 후에는 응용 프로그램에서 필요에 따라 Mailbox 를 구성해야 한다.
다음 절에서 CAN 초기화 절차에 대해 자세히 설명하도록 한다.



2.1. CAN RAM Initialization

CAN RAM 은 CAN 메시지 객체(Mailbox 라고도 함)를 보유한다.
시작하려면 System 레지스터를 구성하여 RAM 공간을 HW 를 통해 0 으로 초기화해야 한다.
CAN RAM 을 초기화 하려면 아래 절차를 따르면 된다.

1. 메모리 초기화 모드로 전환한다:
   MINITGCR.MINITGNA = 0xA

2. MSINENA 를 설정한다.
   메모리 초기화는 DCAN RAM 에 해당하는 레지스터(MSIENAx) 비트를 활성화 한다.

3. 메모리 W 초기화 상태 레지스터(MINISTAT)을 확인하여
   메모리 초기화가 완료 될 때까지 기다린다.

4. 메모리 초기화 모드에서 빠져 나온다.

RAM 을 초기화하는 샘플 코드는 아래와 같다:

SYS_Ptr->MINITGCR_UN.MINITGCR_UL = 0xA;
SYS_Ptr->MSINENA_UL = MEM_CH_DCANRAM;
while (SYS_Ptr->MINISTAT_UL == 0);
SYS_Ptr->MINITGCR_UN.MINITGCR_UL = 0x5;

참고: MEM_CH_DCANRAM 의 경우 장치 별 데이터 시트의 메모리 초기화 표를 참조하라.

패리티 또는 ECC 를 사용하려는 경우
RAM 초기화 절차를 수행하기 전에 패리티 또는 ECC 를 활성화해야 한다.

다음은 패리티 / ECC 를 활성화하는 샘플 코드다:

DCAN1_Ptr->CCR_UN.CCR_ST.PMD_B4 = 0xA



2.2. CAN Configuration

CAN 의 아래 기능은 SW 를 통해 구성 할 수 있다:

* 버스 작동시 자동 웨이크 업을 비활성화 / 활성화
  [Bit: CCR.WUBA - 버스 활동 깨우기]

* 자동 버스 온 타이머를 활성화 / 비활성화
  [Bit: CCR.ABO - 자동 버스 켜짐]

* 패리티 / ECC 를 활성화 / 비활성화
  [Bit: CCR.PMD - 패리티 모드 사용 안함]

* 글로벌 인터럽트 라인 0 과 1 을 활성화 / 비활성화
  [Bit: CCR.IEx - 인터럽트 활성화]

* 오류 인터럽트를 활성화 / 비활성화
  [Bit: CCR.EIE - 오류 인터럽트 활성화]

* 상태 인터럽트를 활성화 / 비활성화
  [Bit: CCR.SIE - 상태 인터럽트 활성화]

* 메시지의 자동 재전송을 설정
  [Bit: DAR - 자동 재전송 비활성화]

* 구성 레지스터에 대한 쓰기 접근을 요청
  [Bit: CCR.CCE - 구성 변경 활성화]

* 디버그 상태에 들어가기 전에 메시지 완료를 설정
  [Bit: CCR.IDS]

* 로컬 전원 끄기 모드를 활성화 / 비활성화
  [Bit: CCR.PDR]

* DMA 요청 행을 활성화 / 비활성화
  [Bit: DEx]

* 테스트 모드를 활성화 / 비활성화
  [Bit: CCR.Test]

CAN 을 구성하는 샘플 코드는 아래와 같다.

Void CanInit (void
{
    /* DCAN1 초기화 */
    canREG1->CTL = 0x00021443U; /* Configure CAN */
    /* 보류중인 모든 오류 플래그 지우기 및 현재 상태 재설정 */
    canREG1->ES = ox0000031Fu;
    /* 메시지의 인터럽트 레벨 할당 */
    canREG1->INTMUXx[0U] = MessageBoxNo;
    canREG1->INTMUXx[1U] = 0x00000000U;
    /* 타이머 주기에 맞게 자동으로 버스 설정 */
    canREG1->ABOTR = 0U;
}



2.3. Configuring CAN Baud Rate

CAN 데이터 전송 보드 레이트 비트 타이밍 값을 계산하고
비트 타이밍 레지스터(BTR)에서 이 값을 프로그래밍 함으로써 설정된다.

CAN 보드 레이트를 초기화하기 위한 절차는 아래와 같다:

1. CANCONTROL.init 비트를 설정한다.
   이렇게 하면 CAN 을 초기화 모드로 전환한다.

2. 구성 변경 활성화(CANCONTROL.CCE) 비트를 설정한다.
   이것은 BTR 레지스터에 대한 쓰기 접근을 가능하게 한다.

3. 계산 된 비트 타이밍 컴포넌트 값을 BTR 레지스터에 쓴다.

4. CANCONTROL.CCE 비트 다음에 CANCONTROL.init 비트를 지운다.

/* 보드 레이트 구성 */
DCAN1_Ptr->CCR_UN.CCR_ST.INIT_B1 = 1 ; /* 초기화 모드 진입 */
DCAN1_Ptr->CCR_UN.CCR_ST.CCE.B1 = 1 ;
while(DCAN1_Ptr->CCR_UN.CCR_ST.INIT_B1 == 0) ;
/* 8 MHz 의 CAN 클록(CAN_CLK)와 BRPE = 0x00 을 사용하면
   0x2301 의 BRT 값이 500 kBits/s 의 비트 전송률을 구성한다. */
DCAN1_Ptr->CCR_UN.BTR_UL = 0x2301 ;
DCAN1_Ptr->CCR_UN.CCR_ST.CCE.B1 = 0 ;
DCAN1_Ptr->CCR_UN.CCR_ST.INIT_B1 = 0 ;
while(DCAN1_Ptr->CCR_UN.CCR_ST.INIT_B1 == 1) ; /* 일반 모드 진입 */



2.4. CAN Message Objects

CAN Message Objects(CAN Mailbox 라고 함)의 구조는 Table 1 에 나와 있다.

Table 1 에는 아래 3 가지 주요 구성 요소가 있다.

* ID: Message ID(확장 메시지 ID, Xtd 포함)
* DLC: 메시지 길이
* Datax: 메시지 데이터(최대 8 바이트)

또한 Table 1 은 아래 제어 비트를 갖는다:

* 유효한 메시지(MsgVal): 메시지가 유효함을 나타냄
* Direction(Dir): Mailbox 가 전송 또는 수신 할 것인지 여부를 나타냄
* Identifier Mask(Msk): ID 에서 매스크 할 비트를 나타낸다.
* 매스크 확장 식별자(MXtd): 확장 ID Xtd 에 대한 매스크 비트를 나타낸다.
* 매스크 메시지 방향(MDir): Dir 이 매스크 되어야 하는지 여부를 나타낸다.
* Acceptance 매스크 사용(UMask): 매스크 비트 사용 여부 표시
* End of Block(EoB): FIFO 버퍼의 마지막 메시지를 나타낸다.
* Transmit Interrupt Enable(TxIE): 데이터 전송 후 인터럽트를 제공함
* Receive Interrupt Enable(RxIE): 데이터 수신 후 인터럽트를 제공함
* 인터럽트 보류 중(IntPnd): 이 메시지 객체에 대해 인터럽트가 보류 중임을 나타냄
* 새 데이터(NewDat): 메시지 객체에서 새 데이터를 사용할 수 있음을 나타냄
* 전송 요청(TxRqst): 데이터 전송을 요청
* 원격 활성화(RmtEn): 메시지 객체가 원격 프레임을 수락 할 수 있게 함



2.5. CAN Interface Registers

Message Object 는 Interface Register(IFx)를 통해서만 접근 할 수 있다.
이는 CPU 와 DMA 가 모두 메시지 객체에 접근하려고 할 때
발생 할 수 있는 중재를 피하기 위한 것이다.
각 IFx 접근 중에 Message 객체의 선택된 항목을 필요에 따라 업데이트 할 수 있다.
한 번에 하나의 Message 객체에만 접근 할 수 있다(읽기 / 쓰기 용)
총 3 개의 인터페이스 레지스터가 있다.
인터페이스 레지스터(IFx)의 동작 중, 해당 busy 비트는 High 로 유지된다.

참고: 지원되는 CAN Mailbox 수에 대한 자세한 내용은 장치 별 데이터시트를 참조하라.
Message Object 1 은 가장 높은 우선 순위를 가지며
마지막으로 구현 된 Message Object 는 최하위 우선 순위를 가진다.
둘 이상의 전송 요청이 보류중인 경우 우선 순위로 인해 처리 된다.
Interface 레지스터 IF1 과 IF2 는 동일하다.

커맨드 레지스터는 데이터 전송의 방향(메시지 객체로부터 혹은 까지)
및 전송 될 메시지 객체의 어떤 부분을 지정하고
전송을 위한 타겟 또는 소스로서 메시지 RAM 에서 메시지 객체를 선택한다.

중재 레지스터는 Message ID 로 메시지 객체를
활성화/비활성화하고 전송 또는 수신으로 구성한다.

메시지 제어 레지스터는 데이터 크기
및 메시지 객체의 초기화 중 수행 될 다른 구성을 정의한다.

데이터 레지스터는 전송되거나 수신되는 데이터를 보유한다.

각 메시지 객체는 인터페이스 레지스터와 함께 필요에 따라 구성 될 수 있다.

IF3 레지스터 셋은 메시지 RAM 에서 전송을 시작할 필요 없이
수신 된 메시지 객체로 자동 업데이트 될 수 있다.
자동 업데이트 기능은 각 메시지 객체에 대해 개별적으로 프로그래밍 할 수 있다.



3. Configuring Message Objects

기본적으로 Message 객체는 아래와 같이 구성 될 수 있다:

* 메시지 객체 전송
* 메시지 객체 수신

그림 7 은 CAN Message 객체를 구성하기 위한 논리적 Diagram 이다.

Message 객체의 구성은 인터페이스 레지스터(IFx)를 통해 수행되어야 한다.
Message 객체를 구성하는 데 필요한 최소한의 단계는 아래와 같다.

1. IFx 를 사용할 준비가 될 때까지 기다린다.
2. Message Mask 를 설정한다.
3. Message Arbitration 을 설정한다.
4. Message Control 워드를 설정한다.
5. IFx 제어 바이트를 설정한다.
6. IFx Message 번호를 설정한다.

CAN 통신은 두 가지 방법 중 하나를 사용하여 수행 할 수 있다:

* Interrupt 방법
* Polling 방법



3.1. Configuring CAN Message Object to Transmit

아래는 Message 객체 전송을 구성하는 샘플 코드다:

while (canREG1->IF1STAT & 0x80)
    ;
canREG1->IF1MSK = 0xC0000000U | ((0x000007FFU & 0x1FFFFFFFU0 << 0U) ;
canREG1->IF1ARB = 0x80000000U | 0x40000000U | 0x20000000U | ((1U & ox1FFFFFFFU) << 0U) ;
canREG1->IF1MCTL = 0x00001080U | 0x00000C00U | 8U ;
canREG1->IF1CMD = 0x20 ;
canREG1->IF1NO = 1 ;

샘플 코드 설명:

1. IF1 이 busy 하다면 대기한다.
2. 매스크 Register 를 구성한다.

   MXtd = 1, 확장 ID 매스크 사용
   MDir = 1, 메시지 방향 매스크 사용
   Msk = 0x7FF, 필터링을 위해 10:0 비트 사용

3. 중재 레지스터를 구성한다.

   MsgVal = 1, Message 객체 활성화
   Xtd = 1, 확장 25 비트 식별자
   Dir = 1, Mailbox 전송
   ID = 1, Message ID 0x1

4. Message 제어 레지스터를 구성한다.

   UMask = 1, 필터링을 위해 매스크 사용
   EoB = 1, 단일 Message 객체
   TxIE = 1, 송신 인터럽트 활성화
   RxIE = 1, 수신 인터럽트 활성화
   DLC = 8, 데이터 길이를 8 로 설정

5. 명령 레지스터를 구성한다.

   Message Number = 0x20, 메시지 번호는 0x20



3.2. Configuring CAN Message Object to Receive

수신 Message 객체를 구성하는 샘플 코드는 아래와 같다:

while (canREG1->IF2STAT & 0x80)
    ;

canREG1->IF2MSK = 0xC0000000U | ((0x000007FFU & 0x1FFFFFFFU0 << 0U) ;
canREG1->IF2ARB = 0x80000000U | 0x40000000U | 0x00000000U | ((2U & ox1FFFFFFFU) << 0U) ;
canREG1->IF2MCTL = 0x00001080U | 0x00000C00U | 8U ;
canREG1->IF2CMD = 0x22 ;
canREG1->IF2NO = 2 ;

샘플 코드 설명:

1. IF2 가 busy 하다면 대기한다.
2. 매스크 레지스터를 구성한다.

   MXtd = 1, 확장 ID 매스크 사용
   MDir = 1, 메시지 방향 매스크 사용
   Msk = 0x7FF, 필터링을 위해 10:0 비트 사용

3. 중재 레지스터를 구성한다.

   MsgVal = 1, Message 객체 활성화
   Xtd = 1, 확장 25 비트 식별자
   Dir = 0, Mailbox 수신
   ID = 2, Message ID 0x2

4. Message 제어 레지스터를 구성한다.

   UMask = 1, 필터링을 위해 매스크 사용
   EoB = 1, 단일 Message 객체
   TxIE = 1, 송신 인터럽트 활성화
   RxIE = 1, 수신 인터럽트 활성화
   DLC = 8, 데이터 길이를 8 로 설정

5. 명령 레지스터를 구성한다.

   Message Number = 0x22, 메시지 번호는 0x22



3.3. CAN Transmit/Receive Operation

unsigned canTransmit (canBASE_t *node, unsigned messageBox, const unsigned char *data)
{
    unsigned I;
    unsigned success = 0U;
    unsigned regIndex = (messageBox - 1U) >> 5U;
    unsigned bitIndex = 1U << ((messageBox - 1U) & 0x1FU);
    /* 대기중인 Message 확인:
       - 보류 중인 메시지, 0 을 반환함
       - 대기 중인 ㅁ시지 없음, 새로운 전송을 시작함 */
    if (node->TXRQx[regIndex] & bitIndex)
    {
        return success;
    }
    /* IF1 을 사용할 준비가 될 때까지 기다리도록 한다. */
    while (node->IF1STAT & 0x80)
        ;
    /* IF1 로 TX 데이터 복사 */
    for (I = 0U < 8U; I++)
    {
        node->IF1DATx[s_canByteOrder[i]] = *data++;
    }
    /* Message 상자에 TX 데이터 복사 */
    node->IF1NO = messageBox;
    success = 1U;
    /* 참고: 이 함수를 사용하려면 먼저 canINIT 함수를 호출해야 한다.
       사용자는 Message 상자를 초기화 할 책임이 있다. */
    return success;
}

다음은 CAN 데이터를 수신하는 샘플 코드다:

unsigned canGetData (canBASE_t *node, unsigned messageBox, unsigned char * const data)
{
    unsigned I;
    unsigned size;
    unsigned char *pData = (unsigned char *) data;
    unsigned success = 0U;
    unsigned regIndex = (messageBox - 1U) >> 5U;
    unsigned bitIndex = 1U << ((messageBox - 1U) & 0x1FU);
    /* 새로운 데이터가 도착 했는지 확인한다.
       - 새로운 데이터가 없으면 0 을 반환한다.
       - 새로운 데이터가 있으면 수신된 메시지를 반환한다. */
    if (!(node->NWDATx[regIndex] & bitIndex))
    {
        return success;
    }
    /* IF2 를 사용할 준비가 될 때까지 기다린다. */
    while (node->IF2STAT & 0x80)
        ;
    /* 데이터를 IF2 로 복사한다. */
    node->IF2NO = messageBox
    /* 데이터가 IF2 로 복사 될 때까지 대기한다. */
    while (node->IF2STAT & 0x80)
        ;
    /* 수신 된 바이트 숫자를 얻는다. */
    size = node->IF2MCTL & 0xFU;
    /* RX 데이터를 Destination 버퍼에 복사한다. */
    for (I = 0U; I < size; I++)
    {
        *pData++ = node->IF2DATx[s_canByteOrder[i]];
    }
    success = 1U;
    /* 데이터가 손실 되었는지 확인한다:
       - 데이터 손실 없음, 1 반환
       - 데이터 손실 있음, 3 반환 */
    if (node->IF2MCTL & 0x4000U)
    {
        success = 3U;
    }
    return success;
}

Figure 8 은 수신 Interrupt 를 처리하는 흐름을 설명한다.



4. Software Flow

이 절에서 CAN 노드 구성을 위한 SW 흐름 요약을 보여준다.

1. Message 객체에 대해 CAN RAM 공간을 초기화 한다.
2. CAN 일반 매개 변수(DMA, Interrupt, 자동 웨이크 업 등)를 구성한다.
3. 필요한 CAN 보드 속도를 구성한다.
4. 필요한 ID 와 매스크를 사용하여 필요한 Message Object 를 구성한다.
5. Interrupt Mode 또는 폴링 모드에 따라 전송/수신 루틴을 제공한다.



Appendix A Sample Bit Timings

그림 9 및 그림 10 은 비트 타이밍 레지스터에 프로그래밍 할
비트 레이트 500 및 1000 에 대해 계산 된 샘플 비트 타이밍을 보여준다.

비트 전송률에 대한 샘플 비트 타이밍 계산 = 500
Sample Bit Timing Calculation for Bit Rate = 500

Bit Timing Register Values:

BRPE = (0U << 16U)
TSEG2: PHASE SEG2 = ((2U - 1U) << 12U)
TSEG1: PROP SEG + PHASE SEG1 = (((3U + 2U) - 1U) << 8U)
SJW: ((2U - 1U) << 6U)
BRP = 9U;

비트 전송률에 대한 샘플 비트 타이밍 계산 = 1000
Sample Bit Timing Calculation for Bit Rate = 1000

Bit timing register values:

BRPE = (0U << 16U)
TSEG2: PHASE SEG2 = ((1U - 1U) << 12U)
TSEG1: PROP SEG + PHASE SEG1 = (((7U + 1U) - 1U) << 8U)
SJW: ((1U - 1U) << 6U)
BRP = 3U;
