
AVRASM ver. 2.1.30  F:\example_program\LCD_PROGRAM\List\128_demoboard.asm Sat Nov 05 15:58:13 2016

F:\example_program\LCD_PROGRAM\List\128_demoboard.asm(1097): warning: Register r5 already defined by the .DEF directive
F:\example_program\LCD_PROGRAM\List\128_demoboard.asm(1098): warning: Register r4 already defined by the .DEF directive
F:\example_program\LCD_PROGRAM\List\128_demoboard.asm(1099): warning: Register r7 already defined by the .DEF directive
F:\example_program\LCD_PROGRAM\List\128_demoboard.asm(1100): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.26 Evaluation
                 ;(C) Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _time_count=R5
                 	.DEF _tmp_index=R4
                 	.DEF _lcd_mode=R7
                 	.DEF _count=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0071 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 _0x3:
000050 454d
000051 4147
000052 3231
000053 2038      	.DB  0x4D,0x45,0x47,0x41,0x31,0x32,0x38,0x20
                 _0x4:
000054 4557
000055 434c
000056 4d4f
000057 3a45      	.DB  0x57,0x45,0x4C,0x43,0x4F,0x4D,0x45,0x3A
                 _0x5:
000058 4e43
000059 2d54
00005a 5055
00005b 203a      	.DB  0x43,0x4E,0x54,0x2D,0x55,0x50,0x3A,0x20
                 _0x6:
00005c 4145      	.DB  0x45,0x41
                 _0x7:
00005d 2020
00005e 2020
00005f 2020
F:\example_program\LCD_PROGRAM\List\128_demoboard.asm(1164): warning: .cseg .db misalignment - padding zero byte
000060 0020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20
                 
                 __GLOBAL_INI_TBL:
000061 0001      	.DW  0x01
000062 0002      	.DW  0x02
000063 009e      	.DW  __REG_BIT_VARS*2
                 
000064 0008      	.DW  0x08
000065 0500      	.DW  _str_mega128
000066 00a0      	.DW  _0x3*2
                 
000067 0008      	.DW  0x08
000068 0509      	.DW  _str_welcome
000069 00a8      	.DW  _0x4*2
                 
00006a 0008      	.DW  0x08
00006b 0512      	.DW  _str_countup
00006c 00b0      	.DW  _0x5*2
                 
00006d 0002      	.DW  0x02
00006e 051b      	.DW  _str_ea
00006f 00b8      	.DW  _0x6*2
                 
                 _0xFFFFFFFF:
000070 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000071 94f8      	CLI
000072 27ee      	CLR  R30
000073 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000074 e0f1      	LDI  R31,1
000075 bff5      	OUT  MCUCR,R31
000076 bfe5      	OUT  MCUCR,R30
000077 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000079 e1f8      	LDI  R31,0x18
00007a bdf1      	OUT  WDTCR,R31
00007b bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00007c e08d      	LDI  R24,(14-2)+1
00007d e0a2      	LDI  R26,2
00007e 27bb      	CLR  R27
                 __CLEAR_REG:
00007f 93ed      	ST   X+,R30
000080 958a      	DEC  R24
000081 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000082 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000083 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000084 e0a0      	LDI  R26,LOW(__SRAM_START)
000085 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000086 93ed      	ST   X+,R30
000087 9701      	SBIW R24,1
000088 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000089 ece2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008b 9185      	LPM  R24,Z+
00008c 9195      	LPM  R25,Z+
00008d 9700      	SBIW R24,0
00008e f061      	BREQ __GLOBAL_INI_END
00008f 91a5      	LPM  R26,Z+
000090 91b5      	LPM  R27,Z+
000091 9005      	LPM  R0,Z+
000092 9015      	LPM  R1,Z+
000093 01bf      	MOVW R22,R30
000094 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000095 9005      	LPM  R0,Z+
000096 920d      	ST   X+,R0
000097 9701      	SBIW R24,1
000098 f7e1      	BRNE __GLOBAL_INI_LOOP
000099 01fb      	MOVW R30,R22
00009a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00009b bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009c efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009d bfed      	OUT  SPL,R30
00009e e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a0 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a1 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a2 940c 00df 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include "mydef.h"
                 ;#include "lcd.h"
                 ;
                 ;void update_lcd(void);
                 ;void set_led(u08 n);
                 ;u08 time_count;
                 ;bit time_flag;
                 ;u16 tmp_buf[10];
                 ;u08 tmp_index;
                 ;
                 ;eeprom u08 eep_model=1;
                 ;eeprom u32 eep_average_fuel=0;
                 ;
                 ;volatile u08 buzzer_count;
                 ;
                 ;u08 lcd_mode;
                 ;u08 count;
                 ;
                 ;u08 str_mega128[] = "MEGA128 ";
                 
                 	.DSEG
                 ;u08 str_welcome[] = "WELCOME:";
                 ;
                 ;u08 str_countup[] = "CNT-UP: ";
                 ;u08 str_ea[] = "EA";
                 ;u08 str_blank[] = "       ";
                 ;
                 ;
                 ;void set_led(u08 n) //ON, POSITION
                 ; 0000 001F {
                 
                 	.CSEG
                 _set_led:
                 ; .FSTART _set_led
                 ; 0000 0020 	switch(n)
0000a4 93aa      	ST   -Y,R26
                 ;	n -> Y+0
0000a5 81e8      	LD   R30,Y
                 ; 0000 0021 	{
                 ; 0000 0022 	 case 0: PORTF = 0x00;  break;
0000a6 30e0      	CPI  R30,0
0000a7 f421      	BRNE _0xB
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 93e0 0062 	STS  98,R30
0000ab c032      	RJMP _0xA
                 ; 0000 0023 	 case 1: PORTF = 0x01;  break;
                 _0xB:
0000ac 30e1      	CPI  R30,LOW(0x1)
0000ad f421      	BRNE _0xC
0000ae e0e1      	LDI  R30,LOW(1)
0000af 93e0 0062 	STS  98,R30
0000b1 c02c      	RJMP _0xA
                 ; 0000 0024 	 case 2: PORTF = 0x03;  break;
                 _0xC:
0000b2 30e2      	CPI  R30,LOW(0x2)
0000b3 f421      	BRNE _0xD
0000b4 e0e3      	LDI  R30,LOW(3)
0000b5 93e0 0062 	STS  98,R30
0000b7 c026      	RJMP _0xA
                 ; 0000 0025 	 case 3: PORTF = 0x07;  break;
                 _0xD:
0000b8 30e3      	CPI  R30,LOW(0x3)
0000b9 f421      	BRNE _0xE
0000ba e0e7      	LDI  R30,LOW(7)
0000bb 93e0 0062 	STS  98,R30
0000bd c020      	RJMP _0xA
                 ; 0000 0026 	 case 4: PORTF = 0x0F;	break;
                 _0xE:
0000be 30e4      	CPI  R30,LOW(0x4)
0000bf f421      	BRNE _0xF
0000c0 e0ef      	LDI  R30,LOW(15)
0000c1 93e0 0062 	STS  98,R30
0000c3 c01a      	RJMP _0xA
                 ; 0000 0027 	 case 5: PORTF = 0x1F;	break;
                 _0xF:
0000c4 30e5      	CPI  R30,LOW(0x5)
0000c5 f421      	BRNE _0x10
0000c6 e1ef      	LDI  R30,LOW(31)
0000c7 93e0 0062 	STS  98,R30
0000c9 c014      	RJMP _0xA
                 ; 0000 0028 	 case 6: PORTF = 0x3F;  break;
                 _0x10:
0000ca 30e6      	CPI  R30,LOW(0x6)
0000cb f421      	BRNE _0x11
0000cc e3ef      	LDI  R30,LOW(63)
0000cd 93e0 0062 	STS  98,R30
0000cf c00e      	RJMP _0xA
                 ; 0000 0029 	 case 7: PORTF = 0x7F;  break;
                 _0x11:
0000d0 30e7      	CPI  R30,LOW(0x7)
0000d1 f421      	BRNE _0x12
0000d2 e7ef      	LDI  R30,LOW(127)
0000d3 93e0 0062 	STS  98,R30
0000d5 c008      	RJMP _0xA
                 ; 0000 002A 	 case 8: PORTF = 0xFF;  break;
                 _0x12:
0000d6 30e8      	CPI  R30,LOW(0x8)
0000d7 f421      	BRNE _0x14
0000d8 efef      	LDI  R30,LOW(255)
0000d9 93e0 0062 	STS  98,R30
0000db c002      	RJMP _0xA
                 ; 0000 002B 	 default: PORTD = 0x01; break;
                 _0x14:
0000dc e0e1      	LDI  R30,LOW(1)
0000dd bbe2      	OUT  0x12,R30
                 ; 0000 002C 	}
                 _0xA:
                 ; 0000 002D }
0000de c0db      	RJMP _0x2060003
                 ; .FEND
                 ;void main(void)
                 ; 0000 002F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0030 u08 i;
                 ; 0000 0031 
                 ; 0000 0032 	PORTA = 0x00;
                 ;	i -> R17
0000df e0e0      	LDI  R30,LOW(0)
0000e0 bbeb      	OUT  0x1B,R30
                 ; 0000 0033 	DDRA = 0x00;
0000e1 bbea      	OUT  0x1A,R30
                 ; 0000 0034 
                 ; 0000 0035 	DDRB = 0x40; 		//INPUT MODE AND BUZZER = OUPUT
0000e2 e4e0      	LDI  R30,LOW(64)
0000e3 bbe7      	OUT  0x17,R30
                 ; 0000 0036 	PORTB = 0x0F;           //PULL UP ON
0000e4 e0ef      	LDI  R30,LOW(15)
0000e5 bbe8      	OUT  0x18,R30
                 ; 0000 0037 
                 ; 0000 0038 	PORTC = 0x00;
0000e6 e0e0      	LDI  R30,LOW(0)
0000e7 bbe5      	OUT  0x15,R30
                 ; 0000 0039 	DDRC = 0xFF;
0000e8 efef      	LDI  R30,LOW(255)
0000e9 bbe4      	OUT  0x14,R30
                 ; 0000 003A 
                 ; 0000 003B 	PORTD=0x00; //output all 0 ,PULL UP OFF
0000ea e0e0      	LDI  R30,LOW(0)
0000eb bbe2      	OUT  0x12,R30
                 ; 0000 003C 	DDRD= (0x01<<7)|(0x01<<6)|(0x01<<5)|(0x01<<4)|(0x01<<3)|(0x01<<2)|(0x01<<1)|(0x01<<0); //all output set
0000ec efef      	LDI  R30,LOW(255)
0000ed bbe1      	OUT  0x11,R30
                 ; 0000 003D 
                 ; 0000 003E 	PORTE = 0x00 | (0x03 << 6);
0000ee ece0      	LDI  R30,LOW(192)
0000ef b9e3      	OUT  0x3,R30
                 ; 0000 003F 	DDRE = 0x00;
0000f0 e0e0      	LDI  R30,LOW(0)
0000f1 b9e2      	OUT  0x2,R30
                 ; 0000 0040 
                 ; 0000 0041 	PORTF = 0x00;
0000f2 93e0 0062 	STS  98,R30
                 ; 0000 0042 	DDRF = 0xFF;
0000f4 efef      	LDI  R30,LOW(255)
0000f5 93e0 0061 	STS  97,R30
                 ; 0000 0043 
                 ; 0000 0044 	PORTG = 0x03;
0000f7 e0e3      	LDI  R30,LOW(3)
0000f8 93e0 0065 	STS  101,R30
                 ; 0000 0045 	DDRG = 0x01;
0000fa e0e1      	LDI  R30,LOW(1)
0000fb 93e0 0064 	STS  100,R30
                 ; 0000 0046 //-----------------------------------------------
                 ; 0000 0047     ASSR=0x00;
0000fd e0e0      	LDI  R30,LOW(0)
0000fe bfe0      	OUT  0x30,R30
                 ; 0000 0048     TCCR0==0x00;
0000ff b7e3      	IN   R30,0x33
000100 e0a0      	LDI  R26,LOW(0)
000101 d100      	RCALL __EQB12
                 ; 0000 0049     TCNT0=0x00;
000102 e0e0      	LDI  R30,LOW(0)
000103 bfe2      	OUT  0x32,R30
                 ; 0000 004A     OCR0=0x00;
000104 bfe1      	OUT  0x31,R30
                 ; 0000 004B 
                 ; 0000 004C     TCCR1A==0x00;
000105 b5ef      	IN   R30,0x2F
000106 d0fb      	RCALL __EQB12
                 ; 0000 004D     TCCR1B=0x00;
000107 e0e0      	LDI  R30,LOW(0)
000108 bdee      	OUT  0x2E,R30
                 ; 0000 004E     TCNT1H=0x00;
000109 bded      	OUT  0x2D,R30
                 ; 0000 004F     TCNT1L=0x00;
00010a bdec      	OUT  0x2C,R30
                 ; 0000 0050     ICR1H=0x00;
00010b bde7      	OUT  0x27,R30
                 ; 0000 0051     ICR1L=0x00;
00010c bde6      	OUT  0x26,R30
                 ; 0000 0052     OCR1AH=0x00;
00010d bdeb      	OUT  0x2B,R30
                 ; 0000 0053     OCR1AL=0x00;
00010e bdea      	OUT  0x2A,R30
                 ; 0000 0054     OCR1BH=0x00;
00010f bde9      	OUT  0x29,R30
                 ; 0000 0055     OCR1BL=0x00;
000110 bde8      	OUT  0x28,R30
                 ; 0000 0056     OCR1CH=0x00;
000111 93e0 0079 	STS  121,R30
                 ; 0000 0057     OCR1CL=0x00;
000113 93e0 0078 	STS  120,R30
                 ; 0000 0058 
                 ; 0000 0059     TCCR2==0x00;
000115 b5e5      	IN   R30,0x25
000116 d0eb      	RCALL __EQB12
                 ; 0000 005A     TCNT2=0x00;
000117 e0e0      	LDI  R30,LOW(0)
000118 bde4      	OUT  0x24,R30
                 ; 0000 005B     OCR2=0x00;
000119 bde3      	OUT  0x23,R30
                 ; 0000 005C 
                 ; 0000 005D     TCCR3A==0x00;
00011a 91a0 008b 	LDS  R26,139
00011c d0e5      	RCALL __EQB12
                 ; 0000 005E     TCCR3B=0x00;
00011d e0e0      	LDI  R30,LOW(0)
00011e 93e0 008a 	STS  138,R30
                 ; 0000 005F     TCNT3H=0x00;
000120 93e0 0089 	STS  137,R30
                 ; 0000 0060     TCNT3L=0x00;
000122 93e0 0088 	STS  136,R30
                 ; 0000 0061     ICR3H=0x00;
000124 93e0 0081 	STS  129,R30
                 ; 0000 0062     ICR3L=0x00;
000126 93e0 0080 	STS  128,R30
                 ; 0000 0063     OCR3AH=0x00;
000128 93e0 0087 	STS  135,R30
                 ; 0000 0064     OCR3AL=0x00;
00012a 93e0 0086 	STS  134,R30
                 ; 0000 0065     OCR3BH=0x00;
00012c 93e0 0085 	STS  133,R30
                 ; 0000 0066     OCR3BL=0x00;
00012e 93e0 0084 	STS  132,R30
                 ; 0000 0067     OCR3CH=0x00;
000130 93e0 0083 	STS  131,R30
                 ; 0000 0068     OCR3CL=0x00;
000132 93e0 0082 	STS  130,R30
                 ; 0000 0069 
                 ; 0000 006A     EICRA==0x00;
000134 91a0 006a 	LDS  R26,106
000136 d0cb      	RCALL __EQB12
                 ; 0000 006B     EICRB=0x00;
000137 e0e0      	LDI  R30,LOW(0)
000138 bfea      	OUT  0x3A,R30
                 ; 0000 006C     EIMSK==0x00;
000139 b7e9      	IN   R30,0x39
00013a e0a0      	LDI  R26,LOW(0)
00013b d0c6      	RCALL __EQB12
                 ; 0000 006D 
                 ; 0000 006E 	EIFR = 0x00 | 0xc0;
00013c ece0      	LDI  R30,LOW(192)
00013d bfe8      	OUT  0x38,R30
                 ; 0000 006F 
                 ; 0000 0070     TIMSK=0x00;
00013e e0e0      	LDI  R30,LOW(0)
00013f bfe7      	OUT  0x37,R30
                 ; 0000 0071     ETIMSK=0x00;
000140 93e0 007d 	STS  125,R30
                 ; 0000 0072 
                 ; 0000 0073     UCSR0B=0x00;
000142 b9ea      	OUT  0xA,R30
                 ; 0000 0074     UCSR1B==0x00;
000143 91a0 009a 	LDS  R26,154
000145 d0bc      	RCALL __EQB12
                 ; 0000 0075     ACSR=0x08;
000146 e0e8      	LDI  R30,LOW(8)
000147 b9e8      	OUT  0x8,R30
                 ; 0000 0076     SFIOR==0x00;
000148 b5e0      	IN   R30,0x20
000149 e0a0      	LDI  R26,LOW(0)
00014a d0b7      	RCALL __EQB12
                 ; 0000 0077 
                 ; 0000 0078     ADCSRA==0x00;
00014b b1e6      	IN   R30,0x6
00014c d0b5      	RCALL __EQB12
                 ; 0000 0079     SPCR==0x00;
00014d b1ed      	IN   R30,0xD
00014e d0b3      	RCALL __EQB12
                 ; 0000 007A 
                 ; 0000 007B     TWCR==0x00;
00014f 91a0 0074 	LDS  R26,116
000151 e0e0      	LDI  R30,LOW(0)
000152 d0af      	RCALL __EQB12
                 ; 0000 007C //**********************************************
                 ; 0000 007D 
                 ; 0000 007E 	lcd_mode = 1;
000153 e0e1      	LDI  R30,LOW(1)
000154 2e7e      	MOV  R7,R30
                 ; 0000 007F 
                 ; 0000 0080 	lcd_init();
000155 d066      	RCALL _lcd_init
                 ; 0000 0081     lcd_clear();
000156 d074      	RCALL _lcd_clear
                 ; 0000 0082 	lcd_home();
000157 d071      	RCALL _lcd_home
                 ; 0000 0083 
                 ; 0000 0084     lcd_control_write(0x80);
000158 e8a0      	LDI  R26,LOW(128)
000159 d050      	RCALL _lcd_control_write
                 ; 0000 0085 	lcd_print_data(str_welcome,8);
00015a e0e9      	LDI  R30,LOW(_str_welcome)
00015b e0f5      	LDI  R31,HIGH(_str_welcome)
00015c d083      	RCALL SUBOPT_0x0
                 ; 0000 0086 
                 ; 0000 0087     delay_ms(500);
00015d efa4      	LDI  R26,LOW(500)
00015e e0b1      	LDI  R27,HIGH(500)
00015f d0a7      	RCALL _delay_ms
                 ; 0000 0088 
                 ; 0000 0089     lcd_control_write(0xC0);
000160 eca0      	LDI  R26,LOW(192)
000161 d048      	RCALL _lcd_control_write
                 ; 0000 008A     lcd_print_data(str_mega128,8);
000162 e0e0      	LDI  R30,LOW(_str_mega128)
000163 e0f5      	LDI  R31,HIGH(_str_mega128)
000164 d07b      	RCALL SUBOPT_0x0
                 ; 0000 008B 	delay_ms(3000);
000165 eba8      	LDI  R26,LOW(3000)
000166 e0bb      	LDI  R27,HIGH(3000)
000167 d09f      	RCALL _delay_ms
                 ; 0000 008C 	delay_ms(3000);
000168 eba8      	LDI  R26,LOW(3000)
000169 e0bb      	LDI  R27,HIGH(3000)
00016a d09c      	RCALL _delay_ms
                 ; 0000 008D 
                 ; 0000 008E 	lcd_home();
00016b d05d      	RCALL _lcd_home
                 ; 0000 008F 	lcd_clear();
00016c d05e      	RCALL _lcd_clear
                 ; 0000 0090 
                 ; 0000 0091     lcd_control_write(0x80);
00016d e8a0      	LDI  R26,LOW(128)
00016e d03b      	RCALL _lcd_control_write
                 ; 0000 0092     lcd_print_data(str_countup,8);
00016f e1e2      	LDI  R30,LOW(_str_countup)
000170 e0f5      	LDI  R31,HIGH(_str_countup)
000171 d06e      	RCALL SUBOPT_0x0
                 ; 0000 0093     lcd_control_write(0xC5);
000172 eca5      	LDI  R26,LOW(197)
000173 d036      	RCALL _lcd_control_write
                 ; 0000 0094     lcd_print_data(str_ea,2);
000174 e1eb      	LDI  R30,LOW(_str_ea)
000175 e0f5      	LDI  R31,HIGH(_str_ea)
000176 93fa      	ST   -Y,R31
000177 93ea      	ST   -Y,R30
000178 e0a2      	LDI  R26,LOW(2)
000179 d054      	RCALL _lcd_print_data
                 ; 0000 0095 
                 ; 0000 0096 //	#asm("sei")
                 ; 0000 0097 
                 ; 0000 0098     count = 0;
00017a 2466      	CLR  R6
                 ; 0000 0099 
                 ; 0000 009A 	while (1)
                 _0x15:
                 ; 0000 009B 	{
                 ; 0000 009C 	    for(i=1;i<9;i++) {set_led(i);delay_ms(100);}
00017b e011      	LDI  R17,LOW(1)
                 _0x19:
00017c 3019      	CPI  R17,9
00017d f418      	BRSH _0x1A
00017e d065      	RCALL SUBOPT_0x1
00017f 5f1f      	SUBI R17,-1
000180 cffb      	RJMP _0x19
                 _0x1A:
                 ; 0000 009D //	    BUZZER_ON;
                 ; 0000 009E //	    delay_ms(200);
                 ; 0000 009F //      BUZZER_OFF;
                 ; 0000 00A0 
                 ; 0000 00A1         for(i=8;i>0;i--) {set_led(i);delay_ms(100);}
000181 e018      	LDI  R17,LOW(8)
                 _0x1C:
000182 3011      	CPI  R17,1
000183 f018      	BRLO _0x1D
000184 d05f      	RCALL SUBOPT_0x1
000185 5011      	SUBI R17,1
000186 cffb      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00A2     	BUZZER_ON;
000187 9ac6      	SBI  0x18,6
                 ; 0000 00A3     	delay_ms(200);
000188 eca8      	LDI  R26,LOW(200)
000189 e0b0      	LDI  R27,0
00018a d07c      	RCALL _delay_ms
                 ; 0000 00A4         BUZZER_OFF;
00018b 98c6      	CBI  0x18,6
                 ; 0000 00A5 
                 ; 0000 00A6         count = count+1;
00018c 9463      	INC  R6
                 ; 0000 00A7         if (count>9) count = 0;
00018d e0e9      	LDI  R30,LOW(9)
00018e 15e6      	CP   R30,R6
00018f f408      	BRSH _0x22
000190 2466      	CLR  R6
                 ; 0000 00A8 
                 ; 0000 00A9         lcd_control_write(0xC1);
                 _0x22:
000191 eca1      	LDI  R26,LOW(193)
000192 d017      	RCALL _lcd_control_write
                 ; 0000 00AA         lcd_data_write(0x30+count); //ASCII CODE
000193 2da6      	MOV  R26,R6
000194 5da0      	SUBI R26,-LOW(48)
000195 d018      	RCALL _lcd_data_write
                 ; 0000 00AB 	    delay_ms(500);
000196 efa4      	LDI  R26,LOW(500)
000197 e0b1      	LDI  R27,HIGH(500)
000198 d06e      	RCALL _delay_ms
                 ; 0000 00AC 
                 ; 0000 00AD 	};
000199 cfe1      	RJMP _0x15
                 ; 0000 00AE }
                 _0x23:
00019a cfff      	RJMP _0x23
                 ; .FEND
                 ;
                 ;
                 ;
                 ;/*************************************************************/
                 ;/*                 LCD CONTROL  ROUTINE                      */
                 ;/*************************************************************/
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "mydef.h"
                 ;#include "lcd.h"
                 ;
                 ;void lcd_init_HW(void)
                 ; 0001 0009 {
                 
                 	.CSEG
                 ; 0001 000A 	// initialize LCD control lines
                 ; 0001 000B 	LCD_RS_0;
                 ; 0001 000C 	LCD_RW_0;
                 ; 0001 000D 	LCD_E_0;
                 ; 0001 000E 	// initialize LCD control lines to output
                 ; 0001 000F 	LCD_RS_1;
                 ; 0001 0010 	LCD_RW_1;
                 ; 0001 0011 	LCD_E_1;
                 ; 0001 0012 	// initialize LCD data port to input
                 ; 0001 0013 	// initialize LCD data lines to pull-up
                 ; 0001 0014 	LCD_DATA_POUT = 0xFF;
                 ; 0001 0015 	LCD_DATA_DDR = 0x00;
                 ; 0001 0016 }
                 ;
                 ;void lcd_busy_wait(void)
                 ; 0001 0019 {
                 _lcd_busy_wait:
                 ; .FSTART _lcd_busy_wait
                 ; 0001 001A 	LCD_RS_0;                // set RS to "control"
00019b 98af      	CBI  0x15,7
                 ; 0001 001B 	LCD_DATA_DDR = 0x00;     // set data I/O lines to input (8bit)
00019c d04c      	RCALL SUBOPT_0x2
                 ; 0001 001C 	LCD_DATA_POUT = 0xFF;    // set pull-ups to on (8bit)
                 ; 0001 001D 	LCD_RW_1;                // set R/W to "read"
00019d 9aad      	SBI  0x15,5
                 ; 0001 001E 	LCD_E_1;                 // set "E" line
00019e d04f      	RCALL SUBOPT_0x3
                 ; 0001 001F 	LCD_DELAY;               // wait
                 ; 0001 0020 
                 ; 0001 0021 	while(LCD_DATA_PIN & (1 << LCD_BUSY))
                 _0x20015:
00019f 9bcf      	SBIS 0x19,7
0001a0 c007      	RJMP _0x20017
                 ; 0001 0022 	{
                 ; 0001 0023 		LCD_E_0;     // clear "E" line
0001a1 98ae      	CBI  0x15,6
                 ; 0001 0024 		LCD_DELAY;   // wait
0001a2 d050      	RCALL SUBOPT_0x4
                 ; 0001 0025 		LCD_DELAY;   // wait
                 ; 0001 0026 		LCD_E_1;     // set "E" line
0001a3 d04a      	RCALL SUBOPT_0x3
                 ; 0001 0027 		LCD_DELAY;   // wait
                 ; 0001 0028 		LCD_DELAY;   // wait
                +
0001a4 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0001a5 958a     +DEC R24
0001a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0001 0029 	}
0001a7 cff7      	RJMP _0x20015
                 _0x20017:
                 ; 0001 002A 	LCD_E_0;         // clear "E" line
0001a8 98ae      	CBI  0x15,6
                 ; 0001 002B }
0001a9 9508      	RET
                 ; .FEND
                 ;
                 ;void lcd_control_write(u08 data)
                 ; 0001 002E {
                 _lcd_control_write:
                 ; .FSTART _lcd_control_write
                 ; 0001 002F 	lcd_busy_wait();     // wait until LCD not busy
0001aa 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0001ab dfef      	RCALL _lcd_busy_wait
                 ; 0001 0030 	LCD_RS_0;            // set RS to "control"
0001ac 98af      	CBI  0x15,7
                 ; 0001 0031 	LCD_RW_0;            // set R/W to "write"
0001ad c003      	RJMP _0x2060002
                 ; 0001 0032 	LCD_E_1;             // set "E" line
                 ; 0001 0033 	LCD_DATA_DDR = 0xFF; // set data I/O lines to output (8bit)
                 ; 0001 0034 	LCD_DATA_POUT = data;// output data, 8bits
                 ; 0001 0035 	LCD_DELAY;           // wait
                 ; 0001 0036 	LCD_DELAY;           // wait
                 ; 0001 0037 	LCD_E_0;             // clear "E" line
                 ; 0001 0038 	LCD_DATA_DDR = 0x00; // set data I/O lines to input (8bit)
                 ; 0001 0039 	LCD_DATA_POUT = 0xFF;// set pull-ups to on (8bit)
                 ; 0001 003A }
                 ; .FEND
                 ;
                 ;u08 lcd_control_read(void)
                 ; 0001 003D {
                 ; 0001 003E u08 data;
                 ; 0001 003F 	lcd_busy_wait();      // wait until LCD not busy
                 ;	data -> R17
                 ; 0001 0040 	LCD_DATA_DDR = 0x00;  // set data I/O lines to input (8bit)
                 ; 0001 0041 	LCD_DATA_POUT = 0xFF; // set pull-ups to on (8bit)
                 ; 0001 0042 	LCD_RS_0;             // set RS to "control"
                 ; 0001 0043 	LCD_RW_1;             // set R/W to "read"
                 ; 0001 0044 	LCD_E_1;              // set "E" line
                 ; 0001 0045 	LCD_DELAY;            // wait
                 ; 0001 0046 	LCD_DELAY;            // wait
                 ; 0001 0047 	data = LCD_DATA_PIN;  // input data, 8bits
                 ; 0001 0048 	LCD_E_0;              // clear "E" line
                 ; 0001 0049 	return data;
                 ; 0001 004A }
                 ;
                 ;void lcd_data_write(u08 data)
                 ; 0001 004D {
                 _lcd_data_write:
                 ; .FSTART _lcd_data_write
                 ; 0001 004E 	lcd_busy_wait();            // wait until LCD not busy
0001ae 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0001af dfeb      	RCALL _lcd_busy_wait
                 ; 0001 004F 	LCD_RS_1;                   // set RS to "data"
0001b0 9aaf      	SBI  0x15,7
                 ; 0001 0050 	LCD_RW_0;                   // set R/W to "write"
                 _0x2060002:
0001b1 98ad      	CBI  0x15,5
                 ; 0001 0051 	LCD_E_1;                    // set "E" line
0001b2 9aae      	SBI  0x15,6
                 ; 0001 0052 	LCD_DATA_DDR = 0xFF;        // set data I/O lines to output (8bit)
0001b3 efef      	LDI  R30,LOW(255)
0001b4 bbea      	OUT  0x1A,R30
                 ; 0001 0053 	LCD_DATA_POUT = data;       // output data, 8bits
0001b5 81e8      	LD   R30,Y
0001b6 bbeb      	OUT  0x1B,R30
                 ; 0001 0054 	LCD_DELAY;                  // wait
0001b7 d03b      	RCALL SUBOPT_0x4
                 ; 0001 0055 	LCD_DELAY;                  // wait
                 ; 0001 0056 	LCD_E_0;                    // clear "E" line
0001b8 98ae      	CBI  0x15,6
                 ; 0001 0057 	LCD_DATA_DDR = 0x00;        // set data I/O lines to input (8bit)
0001b9 d02f      	RCALL SUBOPT_0x2
                 ; 0001 0058 	LCD_DATA_POUT = 0xFF;       // set pull-ups to on (8bit)
                 ; 0001 0059 }
                 _0x2060003:
0001ba 9621      	ADIW R28,1
0001bb 9508      	RET
                 ; .FEND
                 ;
                 ;/*************************************************************/
                 ;/********************* PUBLIC FUNCTIONS **********************/
                 ;/*************************************************************/
                 ;
                 ;void lcd_init(void)
                 ; 0001 0060 {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0001 0061 //    lcd_init_HW();
                 ; 0001 0062     delay_ms(100);
0001bc e6a4      	LDI  R26,LOW(100)
0001bd e0b0      	LDI  R27,0
0001be d048      	RCALL _delay_ms
                 ; 0001 0063 
                 ; 0001 0064     // LCD function set
                 ; 0001 0065     lcd_control_write(0x3A);
0001bf e3aa      	LDI  R26,LOW(58)
0001c0 d039      	RCALL SUBOPT_0x5
                 ; 0001 0066     delay_ms(60);
                 ; 0001 0067 
                 ; 0001 0068     // clear LCD
                 ; 0001 0069     lcd_control_write(0x01);
0001c1 e0a1      	LDI  R26,LOW(1)
0001c2 d037      	RCALL SUBOPT_0x5
                 ; 0001 006A     delay_ms(60);   // wait 60ms
                 ; 0001 006B 
                 ; 0001 006C     // set entry mode
                 ; 0001 006D     lcd_control_write(0x0C);
0001c3 e0ac      	LDI  R26,LOW(12)
0001c4 d039      	RCALL SUBOPT_0x6
                 ; 0001 006E     delay_ms(20);
                 ; 0001 006F 
                 ; 0001 0070     // move cursor to home
                 ; 0001 0071     lcd_control_write(0x02);
0001c5 e0a2      	LDI  R26,LOW(2)
0001c6 d037      	RCALL SUBOPT_0x6
                 ; 0001 0072     delay_ms(20);
                 ; 0001 0073 
                 ; 0001 0074     // set data address to 0
                 ; 0001 0075     lcd_control_write(0x00);
0001c7 e0a0      	LDI  R26,LOW(0)
0001c8 c003      	RJMP _0x2060001
                 ; 0001 0076 
                 ; 0001 0077 }
                 ; .FEND
                 ;
                 ;void lcd_home(void)
                 ; 0001 007A {
                 _lcd_home:
                 ; .FSTART _lcd_home
                 ; 0001 007B     // move cursor to home
                 ; 0001 007C     lcd_control_write(0x02);
0001c9 e0a2      	LDI  R26,LOW(2)
0001ca c001      	RJMP _0x2060001
                 ; 0001 007D }
                 ; .FEND
                 ;
                 ;void lcd_clear(void)
                 ; 0001 0080 {
                 _lcd_clear:
                 ; .FSTART _lcd_clear
                 ; 0001 0081     // clear LCD
                 ; 0001 0082     lcd_control_write(0x01);
0001cb e0a1      	LDI  R26,LOW(1)
                 _0x2060001:
0001cc dfdd      	RCALL _lcd_control_write
                 ; 0001 0083 }
0001cd 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void lcd_print_data(u08* data, u08 n_bytes)
                 ; 0001 0087 {
                 _lcd_print_data:
                 ; .FSTART _lcd_print_data
                 ; 0001 0088 u08 i;
                 ; 0001 0089 	// print data
                 ; 0001 008A 	for(i=0; i < n_bytes; i++)
0001ce 93aa      	ST   -Y,R26
0001cf 931a      	ST   -Y,R17
                 ;	*data -> Y+2
                 ;	n_bytes -> Y+1
                 ;	i -> R17
0001d0 e010      	LDI  R17,LOW(0)
                 _0x20037:
0001d1 81e9      	LDD  R30,Y+1
0001d2 171e      	CP   R17,R30
0001d3 f448      	BRSH _0x20038
                 ; 0001 008B 	{
                 ; 0001 008C 		lcd_data_write(data[i]);
0001d4 81aa      	LDD  R26,Y+2
0001d5 81bb      	LDD  R27,Y+2+1
0001d6 27ee      	CLR  R30
0001d7 0fa1      	ADD  R26,R17
0001d8 1fbe      	ADC  R27,R30
0001d9 91ac      	LD   R26,X
0001da dfd3      	RCALL _lcd_data_write
                 ; 0001 008D 	}
0001db 5f1f      	SUBI R17,-1
0001dc cff4      	RJMP _0x20037
                 _0x20038:
                 ; 0001 008E }
0001dd 8118      	LDD  R17,Y+0
0001de 9624      	ADIW R28,4
0001df 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _str_mega128:
000500           	.BYTE 0x9
                 _str_welcome:
000509           	.BYTE 0x9
                 _str_countup:
000512           	.BYTE 0x9
                 _str_ea:
00051b           	.BYTE 0x3
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
0001e0 93fa      	ST   -Y,R31
0001e1 93ea      	ST   -Y,R30
0001e2 e0a8      	LDI  R26,LOW(8)
0001e3 cfea      	RJMP _lcd_print_data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0001e4 2fa1      	MOV  R26,R17
0001e5 debe      	RCALL _set_led
0001e6 e6a4      	LDI  R26,LOW(100)
0001e7 e0b0      	LDI  R27,0
0001e8 c01e      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0001e9 e0e0      	LDI  R30,LOW(0)
0001ea bbea      	OUT  0x1A,R30
0001eb efef      	LDI  R30,LOW(255)
0001ec bbeb      	OUT  0x1B,R30
0001ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001ee 9aae      	SBI  0x15,6
                +
0001ef e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0001f0 958a     +DEC R24
0001f1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
0001f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
                +
0001f3 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0001f4 958a     +DEC R24
0001f5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                +
0001f6 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0001f7 958a     +DEC R24
0001f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
0001f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0001fa dfaf      	RCALL _lcd_control_write
0001fb e3ac      	LDI  R26,LOW(60)
0001fc e0b0      	LDI  R27,0
0001fd c009      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0001fe dfab      	RCALL _lcd_control_write
0001ff e1a4      	LDI  R26,LOW(20)
000200 e0b0      	LDI  R27,0
000201 c005      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __EQB12:
000202 17ea      	CP   R30,R26
000203 e0e1      	LDI  R30,1
000204 f009      	BREQ __EQB12T
000205 27ee      	CLR  R30
                 __EQB12T:
000206 9508      	RET
                 
                 _delay_ms:
000207 9610      	adiw r26,0
000208 f039      	breq __delay_ms1
                 __delay_ms0:
000209 95a8      	wdr
                +
00020a ee88     +LDI R24 , LOW ( 0x3E8 )
00020b e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
00020c 9701     +SBIW R24 , 1
00020d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
00020e 9711      	sbiw r26,1
00020f f7c9      	brne __delay_ms0
                 __delay_ms1:
000210 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   5 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:  13 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  18 r25:   3 r26:  46 r27:  14 r28:   3 r29:   1 r30: 146 r31:  11 
x  :   4 y  :  15 z  :   7 
Registers used: 17 out of 35 (48.6%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  18 brpl  :   0 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   0 cpi   :  11 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   7 inc   :   1 jmp   :  36 ld    :   3 ldd   :   4 
ldi   : 104 lds   :   4 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   3 
movw  :   3 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :  42 pop   :   0 push  :   0 rcall :  51 
ret   :   9 reti  :   0 rjmp  :  25 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   5 sbic  :   0 sbis  :   1 sbiw  :   5 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  12 std   :   0 sts   :  28 sub   :   0 subi  :   4 
swap  :   0 tst   :   0 wdr   :   1 
Instructions used: 34 out of 117 (29.1%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000422    972     86   1058  131072   0.8%
[.dseg] 0x000100 0x00051e      0     30     30    4096   0.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
