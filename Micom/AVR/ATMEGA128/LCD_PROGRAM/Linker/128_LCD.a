;/*************************************************************/
;/*                 LCD CONTROL  ROUTINE                      */
;/*************************************************************/
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "mydef.h"
;#include "lcd.h"
;
;void lcd_init_HW(void)
; 0001 0009 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000A 	// initialize LCD control lines
; 0001 000B 	LCD_RS_0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 000C 	LCD_RW_0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000D 	LCD_E_0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 000E 	// initialize LCD control lines to output
; 0001 000F 	LCD_RS_1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0010 	LCD_RW_1;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0011 	LCD_E_1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0012 	// initialize LCD data port to input
; 0001 0013 	// initialize LCD data lines to pull-up
; 0001 0014 	LCD_DATA_POUT = 0xFF;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0015 	LCD_DATA_DDR = 0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0016 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;void lcd_busy_wait(void)
; 0001 0019 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 001A 	LCD_RS_0;                // set RS to "control"
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 001B 	LCD_DATA_DDR = 0x00;     // set data I/O lines to input (8bit)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 001C 	LCD_DATA_POUT = 0xFF;    // set pull-ups to on (8bit)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 001D 	LCD_RW_1;                // set R/W to "read"
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 001E 	LCD_E_1;                 // set "E" line
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 001F 	LCD_DELAY;               // wait
;PCODE: $0000002D VOL: 0
; 0001 0020 
; 0001 0021 	while(LCD_DATA_PIN & (1 << LCD_BUSY))
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0022 	{
; 0001 0023 		LCD_E_0;     // clear "E" line
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0024 		LCD_DELAY;   // wait
;PCODE: $00000034 VOL: 0
; 0001 0025 		LCD_DELAY;   // wait
;PCODE: $00000035 VOL: 0
; 0001 0026 		LCD_E_1;     // set "E" line
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0027 		LCD_DELAY;   // wait
;PCODE: $00000038 VOL: 0
; 0001 0028 		LCD_DELAY;   // wait
;PCODE: $00000039 VOL: 0
; 0001 0029 	}
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 002A 	LCD_E_0;         // clear "E" line
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 002B }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;
;void lcd_control_write(u08 data)
; 0001 002E {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 002F 	lcd_busy_wait();     // wait until LCD not busy
;	data -> Y+0
;PCODE: $00000042 VOL: 0
; 0001 0030 	LCD_RS_0;            // set RS to "control"
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0031 	LCD_RW_0;            // set R/W to "write"
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0032 	LCD_E_1;             // set "E" line
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0033 	LCD_DATA_DDR = 0xFF; // set data I/O lines to output (8bit)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0034 	LCD_DATA_POUT = data;// output data, 8bits
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0035 	LCD_DELAY;           // wait
;PCODE: $0000004D VOL: 0
; 0001 0036 	LCD_DELAY;           // wait
;PCODE: $0000004E VOL: 0
; 0001 0037 	LCD_E_0;             // clear "E" line
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0038 	LCD_DATA_DDR = 0x00; // set data I/O lines to input (8bit)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 0039 	LCD_DATA_POUT = 0xFF;// set pull-ups to on (8bit)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 003A }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;
;u08 lcd_control_read(void)
; 0001 003D {
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 003E u08 data;
; 0001 003F 	lcd_busy_wait();      // wait until LCD not busy
;PCODE: $0000005A VOL: 0
;	data -> R17
;PCODE: $0000005B VOL: 0
; 0001 0040 	LCD_DATA_DDR = 0x00;  // set data I/O lines to input (8bit)
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 0041 	LCD_DATA_POUT = 0xFF; // set pull-ups to on (8bit)
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0042 	LCD_RS_0;             // set RS to "control"
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0043 	LCD_RW_1;             // set R/W to "read"
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0044 	LCD_E_1;              // set "E" line
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0045 	LCD_DELAY;            // wait
;PCODE: $00000066 VOL: 0
; 0001 0046 	LCD_DELAY;            // wait
;PCODE: $00000067 VOL: 0
; 0001 0047 	data = LCD_DATA_PIN;  // input data, 8bits
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 0048 	LCD_E_0;              // clear "E" line
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0049 	return data;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 004A }
;PCODE: $0000006F VOL: 0
;
;void lcd_data_write(u08 data)
; 0001 004D {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 004E 	lcd_busy_wait();            // wait until LCD not busy
;	data -> Y+0
;PCODE: $00000072 VOL: 0
; 0001 004F 	LCD_RS_1;                   // set RS to "data"
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 0050 	LCD_RW_0;                   // set R/W to "write"
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0051 	LCD_E_1;                    // set "E" line
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0052 	LCD_DATA_DDR = 0xFF;        // set data I/O lines to output (8bit)
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 0053 	LCD_DATA_POUT = data;       // output data, 8bits
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 0054 	LCD_DELAY;                  // wait
;PCODE: $0000007D VOL: 0
; 0001 0055 	LCD_DELAY;                  // wait
;PCODE: $0000007E VOL: 0
; 0001 0056 	LCD_E_0;                    // clear "E" line
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0057 	LCD_DATA_DDR = 0x00;        // set data I/O lines to input (8bit)
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 0058 	LCD_DATA_POUT = 0xFF;       // set pull-ups to on (8bit)
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 0059 }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;
;/*************************************************************/
;/********************* PUBLIC FUNCTIONS **********************/
;/*************************************************************/
;
;void lcd_init(void)
; 0001 0060 {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0001 0061 //    lcd_init_HW();
; 0001 0062     delay_ms(100);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0001 0063 
; 0001 0064     // LCD function set
; 0001 0065     lcd_control_write(0x3A);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0066     delay_ms(60);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 0067 
; 0001 0068     // clear LCD
; 0001 0069     lcd_control_write(0x01);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 006A     delay_ms(60);   // wait 60ms
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 006B 
; 0001 006C     // set entry mode
; 0001 006D     lcd_control_write(0x0C);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0001 006E     delay_ms(20);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 006F 
; 0001 0070     // move cursor to home
; 0001 0071     lcd_control_write(0x02);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0001 0072     delay_ms(20);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 0073 
; 0001 0074     // set data address to 0
; 0001 0075     lcd_control_write(0x00);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 0076 
; 0001 0077 }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;
;void lcd_home(void)
; 0001 007A {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 007B     // move cursor to home
; 0001 007C     lcd_control_write(0x02);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 007D }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;
;void lcd_clear(void)
; 0001 0080 {
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 0081     // clear LCD
; 0001 0082     lcd_control_write(0x01);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 0083 }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;
;
;void lcd_print_data(u08* data, u08 n_bytes)
; 0001 0087 {
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 0088 u08 i;
; 0001 0089 	// print data
; 0001 008A 	for(i=0; i < n_bytes; i++)
;PCODE: $000000BA VOL: 0
;	*data -> Y+2
;	n_bytes -> Y+1
;	i -> R17
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 008B 	{
; 0001 008C 		lcd_data_write(data[i]);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 008D 	}
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 008E }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
